# MANAGED VIA SALT --  DO NOT EDIT
{%- set data = salt['mc_utils.json_load'](data) %}
{%- set http2 = data.get('http2', False) %}
{%- set shttp2 = '' %}
{%- if http2 %}
{%-   set shttp2 = ' http2' %}
{%- endif%}
include {{data.vhost_top_file}};

{% if data.server_aliases and data.redirect_aliases %}
{% for h in data.server_aliases %}
server {
    listen {{ data.port }} {{shttp2}};
    {% if data.v6 %}
    listen [::]:{{data.port}} ipv6only=on{{shttp2}};
    {% endif %}
    server_name {{ h }};

    error_log {{data.data.logdir}}/redirect{{ h }}-error.log {{data.loglevel}};
    access_log  {{data.data.logdir}}/redirect{{ h }}-access.log {{data.data.logformat}} if=$method_loggable;

    # feed the map variables for ssl up
    {% if data.data.use_real_ip and  data.reverse_proxy_addresses %}
    {% for addr in data.reverse_proxy_addresses %}
    set_real_ip_from {{addr}};
    {% endfor %}
    real_ip_header {{data.real_ip_header}};
    {% endif %}

    # feed the map variables for ssl up
    set $http_x_ssl $http_x_ssl_resolved;
    set $http_x_forwaded_proto $http_x_forwaded_proto_resolved;
    set $http_x_forwarded_proto $http_x_forwarded_proto_resolved;
    set $http_x_forwarded_ssl $http_x_forwarded_ssl_resolved;
    set $http_x_forwarded_protocol $http_x_forwarded_protocol_resolved;
    # support for typo in old configs
    set $http_x_forwaded_proto $http_x_forwarded_proto_resolved;
    set $http_x_forwaded_ssl $http_x_forwarded_ssl_resolved;
    set $http_x_forwaded_protocol $http_x_forwarded_protocol_resolved;

    rewrite ^(.*)$ http://{{data.server_name}}$1 permanent;
}


{% if data.get('ssl_cert', '') and not data.get('ssl_disabled') %}
server {
    ssl_ciphers {{data.ssl_ciphers}};
    ssl_session_cache  {{data.ssl_session_cache}};
    ssl_session_timeout {{data.ssl_session_timeout}};
    ssl_protocols       {{data.ssl_protocols}};
    ssl_prefer_server_ciphers on;
    ssl_dhparam /etc/ssl/certs/nginxdhparam.pem;
{% if data.get('ssl_bundle', '') %}
    ssl_certificate {{data.ssl_bundle_path}};
{% elif data.get('ssl_cert', '') %}
    ssl_certificate {{data.ssl_cert_path}};
{% endif %}
{% if data.get('ssl_key', '') %}
    ssl_certificate_key {{data.ssl_key_path}};
{% endif %}
    ssl on;
    listen {{ data.ssl_port }} ssl{{shttp2}};
    {% if data.v6 %}
    listen [::]:{{data.ssl_port}} ipv6only=on ssl{{shttp2}};
    {% endif %}

    server_name {{ h }};

    error_log {{data.data.logdir}}/ssl_redirect{{ h }}-error.log {{data.loglevel}};
    access_log  {{data.data.logdir}}/ssl_redirect{{ h }}-access.log {{data.data.logformat}} if=$method_loggable;

    # feed the map variables for ssl up
    {% if data.data.use_real_ip and  data.reverse_proxy_addresses %}
    {% for addr in data.reverse_proxy_addresses %}
    set_real_ip_from {{addr}};
    {% endfor %}
    real_ip_header {{data.real_ip_header}};
    {% endif %}

    # feed the map variables for ssl up
    set $http_x_ssl $http_x_ssl_resolved;
    set $http_x_forwaded_proto $http_x_forwaded_proto_resolved;
    set $http_x_forwarded_proto $http_x_forwarded_proto_resolved;
    set $http_x_forwarded_ssl $http_x_forwarded_ssl_resolved;
    set $http_x_forwarded_protocol $http_x_forwarded_protocol_resolved;
    # support for typo in old configs
    set $http_x_forwaded_proto $http_x_forwarded_proto_resolved;
    set $http_x_forwaded_ssl $http_x_forwarded_ssl_resolved;
    set $http_x_forwaded_protocol $http_x_forwarded_protocol_resolved;

    rewrite ^(.*)$ https://{{data.server_name}}$1 permanent;
}
{% endif%}


{% endfor %}
{% endif %}
server {
    listen {{ data.port }} {% if data.default_server%}default_server {%endif%};
    {% if data.v6 %}
    listen [::]:{{data.port}} {% if data.default_server%}default_server {%endif%}ipv6only=on;
    {% endif %}
    server_name {{ data.server_name }}{% if (False == data.redirect_aliases) and data.server_aliases %} {{ data.server_aliases|join(' ') }}{%endif%};

    server_name_in_redirect {{ data.get('server_name_in_redirect', True) in [False, 'off'] and 'off' or 'on' }};
    error_log {{data.data.logdir}}/{{ data.small_name }}-error.log {{data.loglevel}};
    access_log  {{data.data.logdir}}/{{ data.small_name }}-access.log {{data.data.logformat}} if=$method_loggable;
    # feed the map variables for ssl up
    set $http_x_ssl $http_x_ssl_resolved;
    set $http_x_forwaded_proto $http_x_forwaded_proto_resolved;
    set $http_x_forwarded_proto $http_x_forwarded_proto_resolved;
    set $http_x_forwarded_ssl $http_x_forwarded_ssl_resolved;
    set $http_x_forwarded_protocol $http_x_forwarded_protocol_resolved;
    # support for typo in old configs
    set $http_x_forwaded_proto $http_x_forwarded_proto_resolved;
    set $http_x_forwaded_ssl $http_x_forwarded_ssl_resolved;
    set $http_x_forwaded_protocol $http_x_forwarded_protocol_resolved;
    {% if data.data.use_real_ip and  data.reverse_proxy_addresses %}
    {% for addr in data.reverse_proxy_addresses %}
    set_real_ip_from {{addr}};
    {% endfor %}
    real_ip_header {{data.real_ip_header}};
    {% endif %}
    # Member features should be over ssl
    root {{ data.doc_root }};
    {% if data.allowed_hosts %}
    ## Deny illegal Host headers
    if ($host !~* ^({{ data.allowed_hosts|join('|') }})$ ) {
        return 444;
    }
    {% endif %}

    {% if data.get('ssl_redirect', '') %}
    if ($forwarded_ssl_scheme != "https") {
        rewrite ^/.*$ https://{{data.domain}};
    }
    {% endif %}
    include {{data.basedir}}/status_vhost.conf;
    include {{data.vhost_content_file}};
}
{% if data.get('ssl_cert', '') and not data.get('ssl_disabled') %}
server {
    ssl_ciphers {{data.ssl_ciphers}};
    ssl_session_cache  {{data.ssl_session_cache}};
    ssl_session_timeout {{data.ssl_session_timeout}};
    ssl_protocols       {{data.ssl_protocols}};
    ssl_prefer_server_ciphers on;
    ssl_dhparam /etc/ssl/certs/nginxdhparam.pem;
{% if data.get('ssl_bundle', '') %}
    ssl_certificate {{data.ssl_bundle_path}};
{% elif data.get('ssl_cert', '') %}
    ssl_certificate {{data.ssl_cert_path}};
{% endif %}
{% if data.get('ssl_key', '') %}
    ssl_certificate_key {{data.ssl_key_path}};
{% endif %}

    ssl on;
    listen {{ data.ssl_port }} {% if data.default_server%}default_server {%endif%}ssl{{shttp2}};
    {% if data.v6 %}
    listen [::]:{{data.ssl_port}} {% if data.default_server%}default_server {%endif%}ipv6only=on ssl{{shttp2}};
    {% endif %}
    server_name {{ data.server_name }}{% if (False == data.redirect_aliases) and data.server_aliases %} {{ data.server_aliases|join(' ') }}{%endif%};

    server_name_in_redirect {{ data.get('server_name_in_redirect', True) in [False, 'off'] and 'off' or 'on' }};
    error_log {{data.data.logdir}}/ssl_{{ data.small_name }}-error.log {{data.loglevel}};
    access_log  {{data.data.logdir}}/ssl_{{ data.small_name }}-access.log {{data.data.logformat}} if=$method_loggable;
    # feed the map variables for ssl up
    set $http_x_ssl $http_x_ssl_resolved;
    set $http_x_forwaded_proto $http_x_forwaded_proto_resolved;
    set $http_x_forwarded_proto $http_x_forwarded_proto_resolved;
    set $http_x_forwarded_ssl $http_x_forwarded_ssl_resolved;
    set $http_x_forwarded_protocol $http_x_forwarded_protocol_resolved;
    # support for typo in old configs
    set $http_x_forwaded_proto $http_x_forwarded_proto_resolved;
    set $http_x_forwaded_ssl $http_x_forwarded_ssl_resolved;
    set $http_x_forwaded_protocol $http_x_forwarded_protocol_resolved;
    {% if data.data.use_real_ip and  data.reverse_proxy_addresses %}
    {% for addr in data.reverse_proxy_addresses %}
    set_real_ip_from {{addr}};
    {% endfor %}
    real_ip_header {{data.real_ip_header}};
    {% endif %}
    # Member features should be over ssl
    root {{ data.doc_root }};
    {% if data.allowed_hosts %}
    ## Deny illegal Host headers
    if ($host !~* ^({{ data.allowed_hosts|join('|') }})$ ) {
        return 444;
    }
    {% endif %}
    include {{data.basedir}}/status_vhost.conf;
    include {{data.vhost_content_file}};
}
{% endif%}
