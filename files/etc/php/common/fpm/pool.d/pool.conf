{% set data = salt['mc_utils.json_load'](data) %}
; Start a new pool named '{{ data.pool_name }}'.
; the variable $pool can we used in any directive and will be replaced by the
; pool name
[{{ data.pool_name }}]



; Per pool prefix
; It only applies on the following directives:
; - 'slowlog'
; - 'listen' (unixsocket)
; - 'chroot'
; - 'chdir'
; - 'php_values'
; - 'php_admin_values'
; When not set, the global prefix (or /usr) applies instead.
; Note: This directive can also be relative to the global prefix.
; Default Value: none
; MAKINA: here we put restriction on our web directories tree
prefix = {{ data.pool_root }}

; The address on which to accept FastCGI requests.
; Valid syntaxes are:
;   'ip.add.re.ss:port'    - to listen on a TCP socket to a specific address on
;                            a specific port;
;   'port'                 - to listen on a TCP socket to all addresses on a
;                            specific port;
;   '/path/to/unix/socket' - to listen on a unix socket.
; Note: This value is mandatory.
; MAKINA: by default we should use socket communication with Apache
listen = {{ data.listen }}

; Set listen(2) backlog. A value of '-1' means unlimited.
; Default Value: 128 (-1 on FreeBSD and OpenBSD)
listen.backlog = {{ data.fpm_listen_backlog }}

; List of ipv4 addresses of FastCGI clients which are allowed to connect.
; Equivalent to the FCGI_WEB_SERVER_ADDRS environment variable in the original
; PHP FCGI (5.2.2+). Makes sense only with a tcp listening socket. Each address
; must be separated by a comma. If this value is left blank, connections will be
; accepted from any ip address.
; Default Value: any
;listen.allowed_clients = {{ data.fpm_listen_allowed_clients }}

; Set permissions for unix socket, if one is used. In Linux, read/write
; permissions must be set in order to allow connections from a web server. Many
; BSD-derived systems allow connections regardless of permissions.
; Default Values: user and group are set as the running user
;                 mode is set to 0666
; MAKINA listen mode 0660
listen.owner = {{ data.fpm_user }}
listen.group = {{ data.fpm_group }}
listen.mode = {{ data.fpm_listen_mod }}

; Unix user/group of processes
; Note: The user is mandatory. If the group is not set, the default user's group
;       will be used.
user = {{ data.fpm_user }}
group = {{ data.fpm_group }}

; Specify the nice(2) priority to apply to the pool processes (only if set)
; The value can vary from -19 (highest priority) to 20 (lower priority)
; Note: - It will only work if the FPM master process is launched as root
;       - The pool processes will inherit the master process priority
;         unless it specified otherwise
; Default Value: no set
; MAKINA: commented out, seems to crash
; priority = {{ data.fpm_pool_nice_priority }}


; Choose how the process manager will control the number of child processes.
; Possible Values:
;   static  - a fixed number (pm.max_children) of child processes;
;   dynamic - the number of child processes are set dynamically based
;             on the following directives:
;    pm.max_children      - the maximum number of children that can
;                           be alive at the same time.
;    pm.start_servers     - the number of children created on startup.
;    pm.min_spare_servers - the minimum number of children in 'idle'
;                           state (waiting to process). If the number
;                           of 'idle' processes is less than this
;                           number then some children will be created.
;    pm.max_spare_servers - the maximum number of children in 'idle'
;                           state (waiting to process). If the number
;                           of 'idle' processes is greater than this
;                           number then some children will be killed.
; Note: This value is mandatory.
pm = dynamic

; The number of child processes to be created when pm is set to 'static' and the
; maximum number of child processes to be created when pm is set to 'dynamic'.
; This value sets the limit on the number of simultaneous requests that will be
; served. Equivalent to the ApacheMaxClients directive with mpm_prefork.
; Equivalent to the PHP_FCGI_CHILDREN environment variable in the original PHP
; CGI.
; Note: Used when pm is set to either 'static' or 'dynamic'
; Note: This value is mandatory.
pm.max_children = {{data.fpm_pm_max_children }}

; The number of child processes created on startup.
; Note: Used only when pm is set to 'dynamic'
; Default Value: min_spare_servers + (max_spare_servers - min_spare_servers) / 2
pm.start_servers = {{ data.fpm_pm_start_servers }}

; The desired minimum number of idle server processes.
; Note: Used only when pm is set to 'dynamic'
; Note: Mandatory when pm is set to 'dynamic'
pm.min_spare_servers = {{ data.fpm_pm_min_spare_servers }}

; The desired maximum number of idle server processes.
; Note: Used only when pm is set to 'dynamic'
; Note: Mandatory when pm is set to 'dynamic'
pm.max_spare_servers = {{ data.fpm_pm_max_spare_servers }}

; The number of requests each child process should execute before respawning.
; This can be useful to work around memory leaks in 3rd party libraries. For
; endless request processing specify '0'. Equivalent to PHP_FCGI_MAX_REQUESTS.
; Default Value: 0
pm.max_requests = {{ data.fpm_pm_max_requests }}

; The URI to view the FPM status page. If this value is not set, no URI will be
; recognized as a status page. By default, the status page shows the following
; information:
;   accepted conn        - the number of request accepted by the pool;
;   pool                 - the name of the pool;
;   process manager      - static or dynamic;
;   idle processes       - the number of idle processes;
;   active processes     - the number of active processes;
;   total processes      - the number of idle + active processes.
;   max children reached - number of times, the process limit has been reached,
;                          when pm tries to start more children (works only for
;                          pm 'dynamic')
; The values of 'idle processes', 'active processes' and 'total processes' are
; updated each second. The value of 'accepted conn' is updated in real time.
; Example output:
;   accepted conn:        12073
;   pool:                 www
;   process manager:      static
;   idle processes:       35
;   active processes:     65
;   total processes:      100
;   max children reached: 1
; By default the status page output is formatted as text/plain. Passing either
; 'html' or 'json' as a query string will return the corresponding output
; syntax. Example:
;   http://www.foo.bar/status
;   http://www.foo.bar/status?json
;   http://www.foo.bar/status?html
; Note: The value must start with a leading slash (/). The value can be
;       anything, but it may not be a good idea to use the .php extension or it
;       may conflict with a real PHP file.
; Default Value: not set
; MAKINA we use /fpmstatus by default
pm.status_path = {{ data.fpm_statuspath }}

; The ping URI to call the monitoring page of FPM. If this value is not set, no
; URI will be recognized as a ping page. This could be used to test from outside
; that FPM is alive and responding, or to
; - create a graph of FPM availability (rrd or such);
; - remove a server from a group if it is not responding (load balancing);
; - trigger alerts for the operating team (24/7).
; Note: The value must start with a leading slash (/). The value can be
;       anything, but it may not be a good idea to use the .php extension or it
;       may conflict with a real PHP file.
; Default Value: not set
ping.path = {{ data.fpm_ping }}

; This directive may be used to customize the response of a ping request. The
; response is formatted as text/plain with a 200 response code.
; Default Value: pong
ping.response = {{ data.fpm_pong }}

; The timeout for serving a single request after which the worker process will
; be killed. This option should be used when the 'max_execution_time' ini option
; does not stop script execution for some reason. A value of '0' means 'off'.
; Available units: s(econds)(default), m(inutes), h(ours), or d(ays)
; Default Value: 0
request_terminate_timeout = {{ data.fpm_request_terminate_timeout }}

; The timeout for serving a single request after which a PHP backtrace will be
; dumped to the 'slowlog' file. A value of '0s' means 'off'.
; Available units: s(econds)(default), m(inutes), h(ours), or d(ays)
; Default Value: 0
request_slowlog_timeout = {{ data.fpm_request_slowlog_timeout }}

; The log file for slow requests
; Default Value: not set
; Note: slowlog is mandatory if request_slowlog_timeout is set
; MAKINA: WARNING: chroot does not apply on this setting
slowlog = {{ data.log_dir }}/phpfpm_$pool.log.slow

; Set open file descriptor rlimit.
; Default Value: system defined value
;rlimit_files = 1024

; Set max core size rlimit.
; Possible Values: 'unlimited' or an integer greater or equal to 0
; Default Value: system defined value
;rlimit_core = 0

; Chroot to this directory at the start. This value must be defined as an
; absolute path. When this value is not set, chroot is not used.
; Note: you can prefix with '$prefix' to chroot to the pool prefix or one
; of its subdirectories. If the pool prefix is not set, the global prefix
; will be used instead.
; Note: chrooting is a great security feature and should be used whenever
;       possible. However, all PHP paths will be relative to the chroot
;       (error_log, sessions.save_path, ...).
; Default Value: not set
{% if data.chroot %}
; MAKINA: we chroot in our project prefix
chroot = $prefix
{% endif %}

; Chdir to this directory at the start.
; Note: relative path can be used.
; Default Value: current directory or / when chroot
chdir = /

; Redirect worker stdout and stderr into main error log. If not set, stdout and
; stderr will be redirected to /dev/null according to FastCGI specs.
; Note: on highloaded environement, this can cause some delay in the page
; process time (several ms).
; Default Value: no
; Note: from php-fpm 5.3.9 to 5.3.15 this does not work with yes, so stay with no
catch_workers_output = no

; Limits the extensions of the main script FPM will allow to parse. This can
; prevent configuration mistakes on the web server side. You should only limit
; FPM to .php extensions to prevent malicious users to use other extensions to
; execute php code.
; Note: set an empty value to allow all extensions.
; Default Value: .php
;security.limit_extensions = .php .php3 .php4 .php5

; Pass environment variables like LD_LIBRARY_PATH. All $VARIABLEs are taken from
; the current environment.
; Default Value: clean env
; converve or not enviromnent (no mean yes)
clear_env = {{data.fpm_clear_env}}
env[HOSTNAME] = $HOSTNAME
;env[PATH] = /usr/local/bin:/usr/bin:/bin
env[TMP] = {{ data.tmp_dir }}
env[TMPDIR] = {{ data.tmp_dir }}
env[TEMP] = {{ data.tmp_dir }}
env[DOCUMENT_ROOT] = {{ data.doc_root }}

; Additional php.ini defines, specific to this pool of workers. These settings
; overwrite the values previously defined in the php.ini. The directives are the
; same as the PHP SAPI:
;   php_value/php_flag             - you can set classic ini defines which can
;                                    be overwritten from PHP call 'ini_set'.
;   php_admin_value/php_admin_flag - these directives won't be overwritten by
;                                     PHP call 'ini_set'
; For php_*flag, valid values are on, off, 1, 0, true, false, yes or no.

; Defining 'extension' will load the corresponding shared extension from
; extension_dir. Defining 'disable_functions' or 'disable_classes' will not
; overwrite previously defined php.ini values, but will append the new value
; instead.

; Note: path INI options can be relative and will be expanded with the prefix
; (pool, global or /usr)

; Default Value: nothing is defined by default except the values in php.ini and
;                specified at startup with the -d argument
; MAKINA: here put all php_[admin_]_value we get in classical apache.conf files

{% if data.open_basedir %}
php_admin_value[open_basedir] = "{{data.open_basedir}}"
{% endif %}

php_value[include_path] = "{{data.include_path}}"

;### TMP directories
php_value[axis2.log_path]                        ="{{ data.tmp_dir }}"
php_value[session_pgsql.sem_file_name]           ="{{ data.tmp_dir }}/php_session_pgsql"
php_value[soap.wsdl_cache_dir]                   ="{{ data.tmp_dir }}"
php_value[uploadprogress.file.filename_template] ="{{ data.tmp_dir }}/upt_%s.txt"
php_value[xdebug.output_dir]                     ="{{ data.tmp_dir }}"
php_value[xdebug.profiler_output_dir]            ="{{ data.tmp_dir }}"
php_value[xdebug.trace_output_dir]               ="{{ data.tmp_dir }}"


;### UPLOAD
php_admin_flag[file_uploads]    = {{ data.file_uploads }}
php_admin_value[upload_tmp_dir] = "{{ data.tmp_dir }}"

;Maximum allowed size for uploaded files.
php_admin_value[upload_max_filesize]     = "{{ data.upload_max_filesize }}"
php_admin_value[post_max_size]           = "{{ data.upload_max_filesize }}"
php_admin_value[max_input_vars]          = "{{ data.max_input_vars }}"
php_admin_value[suhosin.post.max_vars]   = "{{ data.max_input_vars }}"
php_admin_value[suhosin.request.max_vars]= "{{ data.max_input_vars }}"

;#### LOGS
php_admin_value[error_log]               = {{ data.log_dir }}/phpfpm.{{ data.pool_name }}.log
php_admin_value[log_errors]              = {{data.log_errors}}
php_admin_value[display_errors]          = {{data.display_errors}}
php_admin_value[html_errors]             = {{data.html_errors}}
php_admin_value[display_startup_errors]  = {{data.display_startup_errors}}
php_admin_value[define_syslog_variables] = {{data.define_syslog_variables}}
php_admin_value[error_reporting]         = {{data.error_reporting}}

; Maximum execution time of each script, in seconds (30)
php_value[max_input_time]     ="{{ data.max_input_time }}"
; Maximum amount of time each script may spend parsing request data
php_value[max_execution_time] ="{{ data.max_execution_time }}"
; Maximum amount of memory a script may consume (8MB)
php_value[memory_limit]       ="{{ data.memory_limit }}"

; Sessions: IMPORTANT reactivate garbage collector on Debian!!!
php_value[session.gc_maxlifetime]              = {{ data.session_gc_maxlifetime }}
php_admin_value[session.gc_probability]        = {{ data.session_gc_probability }}
php_admin_value[session.gc_divisor]            = {{ data.session_gc_divisor }}
{% if data.session_cookie_domain %}
php_value[session.cookie_domain]               = "{{ data.session_cookie_domain }}"
{% endif %}
{% if data.custom_sessions_enabled %}
php_admin_value[session.save_handler]          = {{ data.session_save_handler }}
php_admin_value[session.save_path]             = "{{ data.session_save_path }}"
{% else %}
php_admin_value[session.save_path]             = "{{data.sessions_dir}}"
{% endif %}

; SECURITY
php_admin_value[magic_quotes_gpc]              = 0
php_admin_value[register_globals]              = 0
php_admin_value[session.auto_start]            = {{ data.session_auto_start }}
php_admin_value[mbstring.http_input]           = "pass"
php_admin_value[mbstring.http_output]          = "pass"
php_admin_value[mbstring.encoding_translation] = 0
php_admin_value[allow_url_fopen]               = {{ data.allow_url_fopen }}
php_admin_value[safe_mode]                     = 0
php_admin_value[expose_php]                    = 0
php_admin_value[variables_order]               = PGCSE

; enforce filling PATH_INFO & PATH_TRANSLATED
; and not only SCRIPT_FILENAME
php_admin_value[cgi.fix_pathinfo]              = 1
; 1: will use PATH_TRANSLATED instead of SCRIPT_FILENAME
php_admin_value[cgi.discard_path]              = 0

; FASTCGI chrooted - HACKING SCRIPT_FILENAME
; if any script in the project try to access some $_SERVER
; keys that are not ok in php-fpm mode, then use this
; script to alter/move the $_SERVER array
; the script should be at the root of the project (before the www)
; in the chrooted project
;php_admin_value[auto_prepend_file]          ="/fix_phpfpm_env.php"

{% if data.opcache_install %}
; -------------------------------
; OPCACHE settings                  |
;--------------------------------
php_admin_value[opcache.interned_strings_buffer]  = {{ data.opcache_interned_strings_buffer }}
php_admin_value[opcache.max_accelerated_files]    = {{ data.opcache_max_accelerated_files }}
php_admin_value[opcache.max_wasted_percentage]    = {{ data.opcache_max_wasted_percentage }}
php_admin_value[opcache.use_cwd]                  = {{ data.opcache_use_cwd }}
php_admin_value[opcache.validate_timestamps]      = {{ data.opcache_validate_timestamps }}
php_admin_value[opcache.revalidate_freq]          = {{ data.opcache_revalidate_freq }}
php_admin_value[opcache.revalidate_path]          = {{ data.opcache_revalidate_path }}
php_admin_value[opcache.save_comments]            = {{ data.opcache_save_comments }}
php_admin_value[opcache.load_comments]            = {{ data.opcache_load_comments }}
php_admin_value[opcache.fast_shutdown]            = {{ data.opcache_fast_shutdown }}
php_admin_value[opcache.enable_file_override]     = {{ data.opcache_enable_file_override }}
php_admin_value[opcache.optimization_level]       = "{{ data.opcache_optimization_level }}"
php_admin_value[opcache.blacklist_filename]       = "{{ data.opcache_blacklist_filename }}"
php_admin_value[opcache.max_file_size]            = {{ data.opcache_max_file_size }}
php_admin_value[opcache.force_restart_timeout]    = {{ data.opcache_force_restart_timeout }}
php_admin_value[opcache.error_log]                = "{{ data.opcache_error_log }}"
php_admin_value[opcache.log_verbosity_level]      = {{ data.opcache_log_verbosity_level }}
{% endif %}
{% if data.apc_install %}
; -------------------------------
; APC settings                  |
;--------------------------------
; enabling apc
php_admin_value[apc.enabled]                   = {{ data.apc_enabled }}

; better use cli optimizations in fpm mode, isn't it?
php_admin_value[apc.enable_cli]                = {{ data.apc_enable_cli }}
; allow progress upload bars
php_admin_value[apc.rfc1867]                   = {{ data.apc_rfc1867 }}

; ON a VirtualHost basis we can tune theses APC settings
; want to gain speed? ------------------
; Optimisation of include/require_once calls
php_admin_value[apc.include_once_override]     = {{ data.apc_include_once_override }}
; transform paths in absolute ones (no effect if apc.stat is not 0), files from stream wrappers (extended includes)
; won't be cached if this is activated as they cannot be used with php's realpath()
php_admin_value[apc.canonicalize]               = {{ data.apc_canonicalize }}
; In production set it to 0, then file changes won't be observed before apache is restarted,
; significant boost, else file time is stated at each access (needed at 1 in dev)
php_admin_value[apc.stat]                       = {{ data.apc_stat }}
; avoid problems with rsync or svn not modifying mtime but only ctime
; so if you're in production set this to 1, like for the previous one
php_admin_value[apc.stat_ctime]                 = {{ data.apc_stat_ctime }}

; deprecated option: apc.optimization not available anymore
;php_admin_value[apc.optimization]              =0

; indication on number of files (ZF=1300, nude Drupal 7=1000)
php_admin_value[apc.num_files_hint]            ="{{ data.apc_num_files_hint }}"

; indication on the number of cache variables
php_admin_value[apc.user_entries_hint]         ="{{ data.apc_user_entries_hint }}"

; cache lifetime managmenent ----------------
; time (s) we can stay on the cache even when the cache is full -- Cache full count --
; that means Garbage Collector is never inactivating theses datas before this time is over
; >0 -> old data could stay in the cache while new data want's to come, if no data is deprecated
; 7200 -> entries older than 2 hours will be thrown to make some place
; 0 -> emptying full cache when full
php_admin_value[apc.ttl]                       ="{{ data.apc_ttl }}"
php_admin_value[apc.user_ttl]                  ="{{ data.apc_user_ttl }}"
; this one is the same but you should note this this prevent Garbage collecting after each source change.
php_admin_value[apc.gc_ttl]                    ="{{ data.apc_gc_ttl }}"

; What to cache ? ----------------------------
; could be used to prevent some caching on specific files
; but it's better to cache often used files, isn't it? at least in production
; php_admin_value[apc.filters]                 = "{{ data.apc_filters }}"
;default to 1M, files bigger than that won't be cached
php_admin_value[apc.max_file_size]             = "{{ data.apc_max_file_size }}"

; various things -------------------------------
; only one process caching a same file (beter than apc.slam_defense)
php_admin_flag[apc.write_lock]                   = {{ data.apc_write_lock }}
; prevents caching half written files (by cp for example) by waiting x seconds for new files caching. set it to 0 if using only rsync or mv
php_admin_value[apc.file_update_protection]  = "{{ data.apc_file_update_protection }}"

; early versions of APC only
; optimisations from Facebook, adding a lazy loding capabilities, so you can parse a lot of files
; and only used things are cached
; need to be tested
; php_admin_value[apc.lazy_functions]            = {{ data.apc_lazy_functions }}
; php_admin_value[apc.lazy_classes]              = {{ data.apc_lazy_classes }}

{% endif %}
{% if data.xdebug_install %}
php_admin_value[xdebug.default_enable]          = {{ data. xdebug_enabled }};
; http://xdebug.org/docs/all_settings#collect_params (0|1|2|3|4)
php_admin_value[xdebug.collect_params]          = {{ data.xdebug_collect_params }};
php_admin_value[xdebug.profiler_enable]         = {{ data.xdebug_profiler_enable }};
php_admin_value[xdebug.profiler_enable_trigger] = {{ data.xdebug_profiler_enable_trigger }};
php_admin_value[xdebug.remote_enable] = {{ data.xdebug_remote_enable }};
php_admin_value[xdebug.remote_host] = "{{ data.xdebug_remote_host }}";
php_admin_value[xdebug.profiler_output_name]    =  "{{ data.xdebug_profiler_output_name }}";
{% endif %}

; vim:set et sts=4 ts=4 tw=0 ft=cfg:
