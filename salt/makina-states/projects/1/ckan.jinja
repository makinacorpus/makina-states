{#
# DEPRECATED PROJECT STYLE -- USE APIV2
#
#}
{% import "makina-states/_macros/salt.jinja" as saltmac with context %}
{% import "makina-states/projects/1/base.jinja" as base with context %}
{% import "makina-states/services/db/postgresql/init.sls" as pgsql with context %}
{% import "makina-states/services/java/solr4.sls" as solr with context %}
{% import "makina-states/services/java/tomcat7.sls" as tomcat with context %}

{%- set services = base.services %}
{%- set saltmac = base.saltmac %}
{%- set apacheSettings = salt['mc_apache.settings']() %}
{%- set locations = salt['mc_locations.settings']() %}

{%- macro ckan_db(common) %}
{{ pgsql.postgresql_base() }}
{% for name, dbdata in c.data['dbs'].items() %}
{% set db_name = dbdata['db_name'] %}
{% set db_tablespace = dbdata['db_tablespace'] %}
{% set db_user = dbdata['db_user'] %}
{% set db_password = dbdata['db_password'] %}
{{ pgsql.postgresql_db(db_name, tablespace=db_tablespace) }}
{{ pgsql.postgresql_user(db_user,
                         db_password,
                         groups=['{0}_owners'.format(db_name)]) }}
{% endfor %}
{% endmacro %}


{#-
# Base system prerequisite for ckan
#}
{%- macro ckan_deps(common) %}
{% if common.full -%}
prepreq-{{common.name}}:
  pkg.{{salt['mc_pkgs.settings']()['installmode']}}:
    - watch_in:
      - mc_proxy: {{common.name}}-prerequisites-hook
    - pkgs:
      - autoconf
      - automake
      - build-essential
      - bzip2
      - gettext
      - git
      - groff
      - libbz2-dev
      - libcurl4-openssl-dev
      - libdb-dev
      - libgdbm-dev
      - libjpeg62-dev
      - libreadline-dev
      - libsigc++-2.0-dev
      - libsqlite0-dev
      - libsqlite3-dev
      - libssl-dev
      - libtool
      - libxml2-dev
      - libxslt1-dev
      - m4
      - man-db
      - pkg-config
      - poppler-utils
      - python-dev
      - python-imaging
      - python-setuptools
      - tcl8.4
      - tcl8.4-dev
      - tcl8.5
      - tcl8.5-dev
      - tk8.5-dev
      - wv
      - zlib1g-dev
{%- endif %}
{%- endmacro %}

{#-
# Install a generic (CGWB: http://cgwb-makinacorpus.rhcloud.com/) based buildout for plone
#}
{%- macro ckan_buildout(common) %}

{#-
# Wrap the salt configured setting in a file inputable to buildout
#}
{{common.name}}-settings:
  file.managed:
    - template: jinja
    - name: {{common.project_root}}/etc/sys/settings-local.cfg
    - source: salt://makina-states/files/projects/ckan/genericsettings.cfg
    - user: {{common.user}}
    - group: {{common.group}}
    - mode: 770
    - watch:
      - mc_proxy: {{common.name}}-preinstall-project-hook
      - mc_git: {{common.name}}-checkout-code
    - watch_in:
      - buildout: {{common.name}}-buildout-project
      - mc_proxy: {{common.name}}-postinstall-project-hook
    - defaults:
      salt_data: |
                 {{salt['mc_utils.json_dump']( common.data)}}


ckan-settings:
  file.managed:
    - source: salt://makina-states/files/projects/ckan/settings.cfg
    - name: {{c.project_root}}/etc/settings-local.cfg
    - user: {{common.user}}
    - group: {{common.group}}
    - defaults: |
                {{salt['mc_utils.json_dump'](data)}}

ckan-buildout:
  buildout.installed:
    - name: {{c.project_root}}
    - config: buildout-{{c.default_env}}.cfg
    - runas: {{user}}



{#-
# Run the project buildout but skip the maintainance parts as they are part of salt stuff
#}

{{common.name}}-buildout-caches:
  file.directory:
    - names:
        - {{common.data.buildout.settings.buildout['eggs-directory']}}
        - {{common.data.buildout.settings.buildout['download-cache']}}
        - {{common.data.buildout.settings.buildout['download-directory']}}
    - user: {{common.user}}
    - group: {{common.group}}
    - mode: 775
    - makedirs: true
    - watch:
      - file: {{common.name}}-settings

{% if common.full -%}
{{common.name}}-caches-restricted-perms:
  cmd.run:
    - name: >
            {{saltmac.resetperms}}
            --dmode '0775' --fmode '0775'
            --user  {{common.user}} --group "{{common.group}}"
            --paths {{common.data.buildout.settings.buildout['eggs-directory']}}
            --paths {{common.data.buildout.settings.buildout['download-cache']}}
            --paths {{common.data.buildout.settings.buildout['download-directory']}}
    - watch:
      - file: {{common.name}}-buildout-caches
    - watch_in:
      - {{common.name}}-buildout-project
{%-    endif %}

{{common.name}}-buildout-project:
  file.managed:
    - template: jinja
    - name: {{common.project_root}}/buildout-salt.cfg
    - source: salt://makina-states/files/projects/ckan/genericbuildout.cfg
    - user: {{common.user}}
    - group: {{common.group}}
    - mode: 770
    - watch:
      - file: {{common.name}}-buildout-caches
      - file: {{common.name}}-settings
    - watch_in:
      - buildout: {{common.name}}-buildout-project
      - mc_proxy: {{common.name}}-postinstall-project-hook
    - defaults:
      skippedparts: |
                    '    ${v:maintainance-parts} {% if not common.full -%}'
                    '    chmod'
                    '    chown'
                    '    {%- endif %}'
      salt_data: |
                 {{salt['mc_utils.json_dump']( common.data)}}
      config: buildout-{{common.default_env}}.cfg
  buildout.installed:
    - name: {{common.project_root}}
    - config: buildout-salt.cfg
    - runas: {{common.user}}
    - newest: {{common.data.buildout.newest}}
    - watch:
      - file: {{common.name}}-buildout-caches
      - file: {{common.name}}-settings
      - file: {{common.name}}-buildout-project
    - watch_in:
      - mc_proxy: {{common.name}}-postinstall-project-hook
      - mc_proxy: makina-apache-pre-conf





{#-
# init script is marked as started at first, but the daemon is not there!
#}
etc-init.d-supervisor.{{common.name}}:
  file.symlink:
    - name: {{locations.initd_dir}}/supervisor.{{common.name}}
    - target: {{common.project_root}}/etc/init.d/supervisor.initd
    - watch_in:
      - mc_proxy: {{common.name}}-postinstall-project-hook


{{common.name}}-service:
  service.running:
    - name: supervisor.{{common.name}}
    - enable: True
    - watch:
      - file: etc-init.d-supervisor.{{common.name}}
      - buildout: {{common.name}}-buildout-project
  cmd.run:
    - name: {{locations.initd_dir}}/supervisor.{{common.name}} restart
    - onlyif: test "$({{common.project_root}}/bin/supervisorctl status 2>&1 |grep "refused connection"|wc -l)" != 0
    - user: root
    - watch:
      - service: {{common.name}}-service
    - watch_in:
      - mc_proxy: {{common.name}}-postinstall-project-hook

{#
# VHOST
#}

{{common.name}}-buildout-vhost:
  file.symlink:
    - target: {{common.project_root}}/etc/www/apache.reverseproxy.conf
    - name: {{apacheSettings.vhostdir}}/100-{{common.domain}}.conf
    - makedirs: true
    - watch_in:
      - mc_proxy: {{common.name}}-postinstall-project-hook
      - mc_proxy: makina-apache-pre-conf

{#-
# Logrotate
#}
{% if common.full %}
etc-logrotate.d-{{common.name}}.conf:
  file.symlink:
    - name: {{locations.conf_dir}}/logrotate.d/{{common.name}}.conf
    - target: {{common.project_root}}/etc/logrotate.conf
    - watch_in:
      - mc_proxy: {{common.name}}-postinstall-project-hook
{% endif %}

{%- endmacro %}

{#-
# Cron from generic: pack & backup & restart each day, fullbackup per week (sunday)
#}
{%- macro ckan_crons(common) %}
{%- set cron_hour   = common.data.get('cron_hour', 1) %}
{%- set cron_minute = common.data.get('cron_minute', 0) %}
{{common.name}}-ckanpackdaily:
  cron.present:
    - identifier: "{{common.name}}/project [ckanpackdaily]"
    - user: {{common.user}}
    - minute:  {{ cron_minute + 0 }}
    - hour: {{cron_hour}}
    - name: {{common.project_root}}/bin/zeoserver-zeopack
    - watch:
      - service: {{common.name}}-service
    - watch_in:
      - mc_proxy: {{common.name}}-postinstall-project-hook

{{common.name}}-ckanrestartdaily:
  cron.present:
    - identifier: "{{common.name}}/project [ckanrestartdaily]"
    - user: {{common.user}}
    - minute:  {{ cron_minute + 30 }}
    - hour: {{cron_hour}}
    - watch:
      - service: {{common.name}}-service
    - watch_in:
      - mc_proxy: {{common.name}}-postinstall-project-hook
    - name: |
            {% for nb in range(1, common.data.nbinstances+1) %}
            {%- set iid='instance{0}'.format(nb) %}
            {%- set id='autostart_{0}'.format(iid) %}
            {%- if common.data['buildout']['settings']['v'].get(id, 'false') == 'true' %}
            {{- common.project_root}}/bin/supervisorctl restart {{iid}};
            {%- endif %}
            {%- endfor %}

{{common.name}}-repozodaily:
  cron.present:
    - identifier: "{{common.name}}/project [repozodaily]"
    - user: {{common.user}}
    - minute: {{ cron_minute + 15 }}
    - hour: {{cron_hour}}
    - name: {{common.project_root}}/bin/backup
    - watch:
      - service: {{common.name}}-service
    - watch_in:
      - mc_proxy: {{common.name}}-postinstall-project-hook

{{common.name}}repozoweekly:
  cron.present:
    - identifier: "{{common.name}}/project [repozoweekly]"
    - user: {{common.user}}
    - minute: {{ cron_minute + 45 }}
    - hour: {{cron_hour}}
    - dayweek: 6
    - name: {{common.project_root}}/bin/snapshotbackup
    - watch:
      - service: {{common.name}}-service
    - watch_in:
      - mc_proxy: {{common.name}}-postinstall-project-hook

{%- endmacro %}

{#
# Data dictionnaries that feed the "common.data" dictionnary
# This is one of the most difficult part to understand, idea is to
#}
{%- set default_defaults = {
  'has_app': True,
  'has_db': True,
  'dbs' : {
    'default': {
        'db_host': 'localhost',
        'db_port': '5432',
        'db_name': 'ckan',
        'db_user': 'ckan',
        'db_tablespace': 'pg_default',
        'db_password': 'superS3CR3T',
      },
  },
  'sites': [
      {'name': 'ckan_default',},
  ],
  'buildout': {
    'newest': False,
    'settings': {
     'instance' {
      'data_dir': metadata.project_root + '/data',
      'user': 'ckan',
      'host': '0.0.0.0',
      'port': '5000',
      'debug': 'true',
      'instance1_host': '5001',
      'instance2_host': '5002',
      'instance3_host': '5003',
      'instance4_host': '5004',
      'beaker_secret': 'cRVs3knGuKnSVkgJjXJU8utb0LzfqkwXLgzvhjN',
      'uuid': '96f97f93-edd7-4819-a5b2-c87be33c8644',
      'solr_url': 'http://127.0.0.1:8080/solr/ckan_default',
      'sqlalchemy_url': 'postgresql://%{db_user}s:${db_password}s@%{db_host}s:%{db_port}s',
      'feeds_authority_name: None,
      'feeds_date: None,
      'feeds_author_name: None,
      'feeds_author_link: None,
      'who_log_level': 'warning',
      'root_log_level': 'WARNING',
      'ckan_log_level': 'INFO',
      'ckanext_log_level': 'DEBUG',
      'plugins': 'stats text_preview recline_preview',
      'site_url': 'http://ckan.local',
      'site_title' : 'CKAN (saas)',
      'site_logo' : '/base/images/ckan-logo.png',
      'favicon' : '/images/icons/ckan.ico',
      'site_description' : '',
      'gravatar_default' : 'identicon',
      'preview.direct' : 'png jpg gif',
      'preview.loadable' : 'html htm rdf+xml owl+xml xml n3 n-triples turtle plain atom csv tsv rss txt json',
      'locale_default'       : 'fr',
      'locale_order'         : 'en pt_BR ja it cs_CZ ca es fr el sv sr sr@latin no sk fi ru de pl nl bg ko_KR hu sa sl lv',
      'locales_offered'      : '',
      'locales_filtered_out' : '',
      'anon_create_dataset'                   : False,
      'create_unowned_dataset'                : True,
      'create_dataset_if_not_in_organization' : True,
      'user_create_groups'                    : True,
      'user_create_organizations'             : True,
      'user_delete_groups'                    : True,
      'user_delete_organizations'             : True,
      'create_user_via_api'                   : False,
      'create_user_via_web'                   : True,
      'cache_enabled'                   : False,
      'cache_expires': None,
      'cache_static_max_age': None,
      'instance1': {
        'port': 5001,
        'root_log_level': 'WARNING',
        'ckan_log_level': 'WARNING',
        'ckanext_log_level': 'DEBUG',
      },
      'instance2': {
        'port': 5002,
        'root_log_level': 'WARNING',
        'ckan_log_level': 'WARNING',
        'ckanext_log_level': 'DEBUG',
      },
      'instance3': {
        'port': 5003,
         'root_log_level': 'WARNING',
        'ckan_log_level': 'WARNING',
        'ckanext_log_level': 'DEBUG',
      }
      'instance4': {
        'port':5004
        'root_log_level': 'WARNING',
        'ckan_log_level': 'WARNING',
        'ckanext_log_level': 'DEBUG',
      }
     }
    }
  }
  'cache-directory': locations.apps_dir+'/buildout/cache',
  'cron_hour': 1,
  'cron_minute': 5,
  'nbinstances': 4,
  'buildout': {
    'newest': None,
    'settings': {
     'buildout': {
        'cache-directory': '{cache-directory}/downloads',
        'download-cache': '{cache-directory}/downloads',
        'download-directory': '{cache-directory}/downloads',
        'eggs-directory': '{cache-directory}/eggs',
      },
     }
    }
   }
  }  %}

{% set default_env_defaults = {
       'dev': {

        },
        'prod': {
          'buildout': {
            'newest': False,
            'settings': {
              'debug': 'false',
              'cache_enabled': True,
              'cache_expires': 86400,
              'cache_static_max_age': 86400,
            }
          }
        }
 } %}


{% macro ckan_register_solr(siteid) %}
# {# How did i made the core sole configuration:
# cp /srv/solr/4/home/default/conf/
# cp -rf /srv/solr/4/home/default/ /srv/projects/ckan/salt/files/ckan_default
# cp -rf /srv/projects/ckan/project/src/ckan/ckan/config/solr/schema-2.0.xml files/ckan_default/conf/schema.xml
# #}
{{siteid}}-solr-core:
  file.recurse:
    - order: 100
    - source: salt://makina-projects/ckan/files/solr/ckan_default/
    - template: jinja
    - name: {{solr.home_dir}}/{{siteid}}
    - user: {{tomcat.data['tomcat_user']}}
    - group: {{saltmac.group}}
    - core_name: {{siteid}}
    - require:
      - file: solr-default-core-{{solr.v}}
{% endmacro %}

{% macro ckan_solr(common %}
{{    solr.register_core(siteid, solr.home_dir + "/" + siteid) }}
{%    for site in c.data['sites'] %}
{{      ckan_register_solr(site['name']) }}
{%    endfor %}
{% endmacro %}

{#-
# Makina project per project macro couple (install_ckan_project/install_project)
#}
{%- macro install_ckan_project_do(common) %}
{{    ckan_deps(common) }}
{%    if has_solr() %}
{{      ckan_solr(common) }}
{%    endif %}
{%    if has_db() %}
{{      ckan_db(common) }}
{%    endif %}
{%    if has_app() %}
{{      ckan_app(common) }}
{{      ckan_buildout(common) }}
{%    endif %}
{{    ckan_crons(common) }}
{%- endmacro %}

{#-
#  Look available arguments in _modules/mc_project.py:get_commmon_vars
#}
{%- macro install_ckan_project() %}
{%- do kwargs.setdefault('defaults', default_defaults) %}
{%- do kwargs.setdefault('env_defaults', default_env_defaults) %}
{%- do kwargs.setdefault('user', 'ckan') %}
{%- set common = salt['mc_project.get_common_vars'](*varargs, **kwargs) %}
{%-  if common.data.has_solr %}
{%-   do common.sls_includes.extend(["makina-states.services.java.solr4",])%}
{%-  endif %}
{%-  if common.data.has_db %}
{%-   do common.sls_includes.extend(["makina-states.services.gis.postgis",])%}
{%-  endif %}
{%-  if common.data.has_app %}
{%-    do common.sls_includes.extend(["makina-states.services.http.apache"])%}
{%-  endif %}
{{- base.install_project(common, install_macro=install_ckan_project_do) }}
{% endmacro %}
{# vim: set nofoldenable :#}
