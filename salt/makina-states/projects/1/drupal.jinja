{#
# DEPRECATED PROJECT STYLE -- USE APIV2
# This was a work in progress that did never worked.
#}
{%- import "makina-states/projects/1/base.jinja" as base with context %}
{%- import "makina-states/services/db/mysql.sls" as mysql with context %}
{%- set services = base.services %}
{%- set saltmac = base.saltmac %}
{%- set locs = salt['mc_locations.settings']() %}
{%- set php = salt['mc_php.settings']() %}

{# Base system prerequisite --------------------------------------------------#}
{%- macro drupal_pkgs(common) %}
{% if common.full %}
{{common.name}}-pkgs:
  pkg.{{salt['mc_pkgs.settings']()['installmode']}}:
    - pkgs:
      - bzip2
      - unzip
      - xsltproc
      - curl
      - {{ php.packages.mysql }}
      - {{ php.packages.gd }}
      - {{ php.packages.cli }}
      - {{ php.packages.curl }}
      - {{ php.packages.curl }}
      - {{ php.packages.ldap }}
      - {{ php.packages.dev }}
      - {{ php.packages.json }}
    - watch_in:
        - mc_proxy: prerequisites-hook
{# TODO: php5-redis #}
{# TODO: mysql-client-5.1 for console access? #}
{# TODO: postgresql postgis? #}
{% endif %}
{% endmacro %}

{# Drupal things -------------------------------------------------------------#}
{# drupal_layout --------------------------------------------#}
{% macro drupal_layout(common) %}
{%  set basedirs = [common.project_root,
                    common.project_root+"/www",
                    common.project_root+"/bin",
                    common.project_root+"/doc",
                    common.project_root+"/var",
                    common.project_root+"/lib"
                    ] %}
{%  set writedirs = [common.project_root+"/www/sites/default/files",
                    common.project_root+"/var/tmp",
                    common.project_root+"/var/fcgi",
                    common.project_root+"/var/log",
                    common.project_root+"/var/private"
                    ] %}
{% for dir in basedirs %}
{{common.name}}-rootdir-{{dir}}:
  file.directory:
    - name: {{dir}}
    - user: {{common.user}}
    - group: {{salt['mc_apache.settings']().httpd_user}}
    - mode: "2750"
    - makedirs: true
    - watch:
      - mc_proxy: {{common.name}}-preinstall-project-hook
    - watch_in:
      - mc_proxy: {{common.name}}-postinstall-project-hook
      - mc_proxy: {{common.name}}-rootdir-dirs
{% endfor %}
{% for dir in writedirs %}
{{common.name}}-writedir-{{dir}}:
  file.directory:
    - name: {{dir}}
    - user: {{common.user}}
    - group: {{salt['mc_apache.settings']().httpd_user}}
    - mode: "2770"
    - makedirs: true
    - watch:
      - mc_proxy: {{common.name}}-preinstall-project-hook
    - watch_in:
      - mc_proxy: {{common.name}}-postinstall-project-hook
      - mc_proxy: {{common.name}}-rootdir-dirs
{% endfor %}
{% endmacro %}

{# drush --------------------------------------------#}
{# installing drush via composer ------#}
{% macro drupal_drush(common) %}
global-composer-install:
  mc_php.composer:
    - name: "/usr/local/bin/composer"
    - installer: "https://getcomposer.org/installer"
    - update: False

{# TODO: drush version variable support #}
{{common.name}}-drush-install:
  mc_php.composercommand:
    - name: require
    - args: "drush/drush:6.*"
    - cwd: {{common.project_root}}/lib
    - require:
      - mc_proxy: {{common.name}}-rootdir-dirs
      - mc_php: global-composer-install
    - watch:
      - mc_proxy: {{common.name}}-preinstall-project-hook
    - watch_in:
      - mc_proxy: {{common.name}}-postinstall-project-hook
{# Add a local drush wrapper #}
{{common.name}}-drush-wrapper:
  file.managed:
    - source: salt://makina-states/files/projects/drupal/drush_wrapper
    - name: {{common.project_root}}/bin/drush
    - template: jinja
    - mode: "0770"
    - user: "{{common.user}}"
    - group: "root"
    - defaults:
      project_lib_root: "{{common.project_root}}/lib"
      project_web_root: "{{common.project_root}}/www"
      project_domain: "{{common.domain}}"
    - require:
      - mc_proxy: {{common.name}}-rootdir-dirs
    - watch:
      - mc_proxy: {{common.name}}-preinstall-project-hook
    - watch_in:
      - mc_proxy: {{common.name}}-postinstall-project-hook
{% endmacro %}

{# drupal_make ------------------------------------------------#}
{%- macro drupal_make(common) %}
{{common.name}}-drupal-drush-make:
  cmd.run:
    - name: "{common.project_root}/bin/drush make"
    - require:
      - mc_proxy: {{common.name}}-rootdir-dirsv
    - watch:
      - mc_proxy: {{common.name}}-preinstall-project-hook
    - watch_in:
      - mc_proxy: {{common.name}}-postinstall-project-hook
{% endmacro %}

{# drupal_install ------------------------------------------------------------#}
{%- macro drupal_install(common) %}
{% set db_type = common.data.get("drupal_opts.databases.default.default.username", common.name) %}
{% set db_user = common.data.get("drupal_opts.databases.default.default.username", common.name) %}
{% set db_pass = common.data.get("drupal_opts.databases.default.default.password", common.name) %}
{% set db_port = common.data.get("drupal_opts.databases.default.default.port", 3306) %}
{% set db_host = common.data.get("drupal_opts.databases.default.default.host", '127.0.0.1') %}
{% set db_name = common.data.get("drupal_opts.databases.default.default.database", common.name) %}
{% set db_prefix = common.data.get("drupal_opts.databases.default.default.prefix", "") %}
TODO: local checker if prod need passwords <> defaults!
{# test db connexion with drupal user #}
{% if db_type=='mysql' %}
{{common.name}}-drupal-database-exists:
  mysql_database.present
    - name: '{{ common.data.get("drupal_opts.databases.default.default.database", common.name) }}',
    - character_set='utf8',
    - collate='utf8_general_ci',
    - connection_user='{{ db_user }}',
    - connection_pass='{{ db_pass }}',
    - connection_port= {{ db_port }},
    - connection_host='{{ db_host }}',
    - connection_charset='utf8'
    - watch:
      - mc_proxy: {{common.name}}-preinstall-project-hook
    - watch_in:
      - mc_proxy: {{common.name}}-postinstall-project-hook
{% endif %}

{# create the drush installer configs #}
{{common.name}}-drupal-drush-install-dbconf-set:
  cmd.run:
    - name: echo "{{ db_type}}://{{ db_user }}:{{ db_pass }}@{{ db_hostÂ }}:{{ db_port }}/{{ db_name }}" > "{{common.project_root}}/bin/db.conf"
    - require:
      - mysql_database: {{common.name}}-drupal-database-exists
      - mc_proxy: {{common.name}}-rootdir-dirs
    
{{common.name}}-drupal-drush-install-conf-set:
  file.manage:
    - name: "{{common.project_root}}/bin/install.conf"
    - source: salt://makina-states/files/projects/drupal/installer_conf
    - user:  {{common.user}}
    - group: {{salt['mc_apache.settings']().httpd_user}}
    - mode: "0640"
    - template: jinja
    - defaults:
      data: |
            {{salt['mc_utils.json_dump'](common.data.drupal_opts.install)}}
      profile: "{{common.profile }}"
      db_conf: "bin/db.conf"
      db_prefix: "{{ db_prefix }}"
      site_name: "{{ common.name }}"
    - require:
      - mysql_database: {{common.name}}-drupal-database-exists
      - cmd: {{common.name}}-drupal-drush-install-dbconf-set
    
{# run the drush installer #}
{{common.name}}-drupal-drush-install:
  cmd.run:
    - name: "{common.project_root}/bin/drush install -f {{common.project_root}}/bin/install.conf"
    - require:
      - mc_proxy: {{common.name}}-rootdir-dirs
      - cmd: {{common.name}}-drupal-database-exists
{%- if common.make %}
      - cmd: {{common.name}}-drupal-drush-make
{%- endif %}
    - watch:
      - mc_proxy: {{common.name}}-preinstall-project-hook
    - watch_in:
      - mc_proxy: {{common.name}}-postinstall-project-hook

{# remove the drush installer config #}
{{common.name}}-drupal-drush-install-conf-remove:
  file.absent:
    - name: {{common.project_root}}/bin/install.conf
{{common.name}}-drupal-drush-install-dbconf-remove:
  file.absent:
    - name: {{common.project_root}}/bin/db.conf

{% endmacro %}

{# drupal_settings -----------------------------------------------------------#}
{%- macro drupal_settings(common) %}
{{common.name}}-drupal-settings-present:
  file.exists:
    - name: {{common.project_root}}/www/sites/default/settings.php
    - watch:
      - mc_proxy: {{common.name}}-preinstall-project-hook

{{common.name}}-drupal-settings-include-local:
  file.blockreplace:
    - name: {{common.project_root}}/www/sites/default/settings.php
    - marker_start: "# BLOCK TOP : salt managed zone : Including local settings if any : please do not edit by hand"
    - marker_end: "# BLOCK BOTTOM : local : end of salt managed zone --"
    - show_changes: True
    - append_if_not_found: True
    - content: |
        $localsettingsfile = DRUPAL_ROOT . "/sites/default/local.settings.php";
        if (file_exists($localsettingsfile)) {
            include_once($localsettingsfile);
        }
    - require:
      - file: {{common.name}}-drupal-settings-present

{{common.name}}-drupal-localsettings:
  file.managed:
    - source: salt://makina-states/files/projects/drupal/local.settings.php
    - name: {{common.project_root}}/www/sites/default/local.settings.php
    - user:  {{common.user}}
    - group: {{salt['mc_apache.settings']().httpd_user}}
    - mode: "0640"
    - template: jinja
    - defaults:
      data: |
            {{salt['mc_utils.json_dump'](common.data.drupal_opts.local_settings)}}
    - watch:
      - file: {{common.name}}-drupal-settings-include-local
{% endmacro %}

{# drupal_http_php --------------------------------------------#}
{%- macro drupal_http_php(common) %}
{# Install require HTTP server and PHP things #}
{%-   if common.data.use_phpfpm %}
{%-     if common.data.use_apache %}
{%-       import "makina-states/projects/1/apache-phpfpm.jinja" as phpfpm with context %}
{{        phpfpm.vhost(common) }}
{%      endif %}
{%   endif %}
{% endmacro %}

{# drupal_app --------------------------------------------#}
{%- macro drupal_app(common) %}
{# in full mode re-run the tree layout checks #}
{%   if common.full %}
{{     drupal_layout(common) }}
{{     drupal_drush(common) }}
{{     drupal_http_php(common) }}
{%   endif %}
{%   if common.data.init %}
{#     Run drush make/install!. #}
{#%     if common.data.make %#}
{#{       drupal_drush_make(common) }#}
{#%     endif %#}
{#{       drupal_drush_install(common) }#}
{%  endif %}
{# Now finish installing the app with settings. #}
{#{   drupal_settings(common) }#}
{% endmacro %}


{# Drupal CRON ---------------------------------------------
 #   Either you use elysia_cron and we launch it every minute
 #   Or you don't and we'll launch it every 10 minutes
 ##}
{%- macro drupal_crons(common) %}
{%- set cron_hour   = common.data.get("drupal_opts.cron_hour", 1) %}
{%- set cron_minute = common.data.get("drupal_opts.cron_minute", 0) %}
{%- set has_elysia_cron = common.data.get("drupal_opts.has_elysia_cron", False) %}
{% if has_elysia_cron %}
{# {{common.name}}-drush-cron:
#  file.managed:
#    - source: salt://makina-states/files/projects/drupal/cronfile
#    - name: /etc/cron.d/drupal_cron_{{ common.name }}
#    - template: jinja
#    - defaults:
#      cron_hour: {{ cron_hour }}
#      cron_minute: {{ cron_minute }}
#      common.project_root: {{common.project_root}}
#      has_elysia_cron: {{ has_elysia_cron }}
#    - watch:
#      - mc_proxy: {{common.name}}-postinstall-project-hook
#}
{% endif %}
{# TODO: use that for drupal also
{#{{common.name}}-fixperms:
 # cron.present:
 #   - comment: "{{common.name}}/project Drupal Async services"
 #   - user: {{common.user}}
 #   - minute:  "*/10"
 #   - name: {{common.project_root}}/bin/drush
 #   - watch:
 #     - mc_proxy: {{common.name}}-postinstall-project-hook
#}
{%- endmacro %}

{# Database ------------------------------------------------------------------#}
{%- macro drupal_db(common) %}
{# This is running on host with db role, creating access for drupal's #}
{#Â host/user/passwd on a new database #}
{%- if common.full %}
{%- set db_type = common.data.get("drupal_opts.databases.default.default.username", common.name) %}
{%- set db_user = common.data.get("drupal_opts.databases.default.default.username", common.name) %}
{%- set db_pass = common.data.get("drupal_opts.databases.default.default.password", common.name) %}
{%- set db_port = common.data.get("drupal_opts.databases.default.default.port", 3306) %}
{%- set db_host = common.data.get("drupal_opts.databases.default.default.host", '127.0.0.1') %}
{%- set db_name = common.data.get("drupal_opts.databases.default.default.database", common.name) %}
{# Call MySQL macros to create the database #}
{{- mysql.mysql_db(db=db_name,
                user = db_user,
                host=db_host,
                password=db_pass,
                user_creation=True,
                state_uid= common.name) }}
{% endif %}
{%- endmacro %}

{# Permissions fixer script---------------------------------------------------#}
{% macro fix_perms(common) %}
{# TODO:  create a script to be sure that everyone gets its own respective perms
# {{salt['mc_apache.settings']().httpd_user}} & the php fpm user needs special love
#}
{%- endmacro %}

{# SETTINGS -----------------------------------------------------------------#}
{#
# Data dictionnaries that feed the "common.data" dictionnary
#}
{%- set default_defaults = {
  "has_db": True,
  "has_app": True,
  "drupal_opts": {
      "cron_hour": "*",
      "cron_minute": "*",
      'has_elysia_cron': True,
      'databases': {
          'default' : { 
              'default' : {
                  'database': None,
                  'username': None,
                  'password': None,
                  'host': '127.0.0.1',
                  'port': '3306',
                  'driver': 'mysql',
                  'prefix': False
              }
          }
      },
      'install': {
          'site_subdir': 'default',
          'account_name': 'admin',
          'account_pass': 'admin',
          'account_mail': 'webmaster@example.com',
          'locale': 'fr',
          'clean_url': 1,
          'site_folder': 'www'
      },
      'local_settings': {
          'mc_external_publications_allowed': 0,
          'image_allow_insecure_derivatives': 1,
          'reroute_email_enable': 1,
          'reroute_email_address': 'dev@makina-corpus.com',
          'base_url': 'drupal.example.com',
          'locale_cache_length': 204800,
          'image_jpeg_quality': 95,
          'solr_default_search_server_host': '127.0.0.1',
          'solr_default_search_server_port': '8080',
          'solr_default_search_server_path': '/solr',
          'smtp': {
              'used': True,
              'host': '127.0.0.1',
              'from': '',
              'fromname': '',
          },
          "caching": True,
          'page_cache_invoke_hooks': 0,
          'cache': 0,
          'block_cache': 0,
          'page_cache_maximum_age': 0,
          'page_cache_without_database': 0,
          'omit_vary_cookie': 0,
          'varnish': {
              'used': True,
              'reverse_proxy_addresses': "array('127.0.0.')",
              'control_terminal_string': '127.0.0.1:6082',
              'socket_timeout': 300,
              'control_key': 'foobar'
           },
          'block_cache_bypass_node_grants': 1,
          'cookie_cache_bypass_adv_cache_lifetime': 300,
          'error_level' 
          'preprocess_css': 0,
          'preprocess_js': 0,
          'redis': {
              'used': True,
              'use_predis': True,
              'use_redis': False,
              'server': '127.0.0.1'
           },
          'site_email': 'webmaster@example.com',
          'cache_bin_default': 'DrupalDatabaseCache',
          'cache_bin_cache': 'DrupalDatabaseCache',
          'cache_bin_bootstrap': 'DrupalDatabaseCache',
          'cache_bin_block': 'DrupalDatabaseCache',
          'cache_bin_content': 'DrupalDatabaseCache',
          'cache_bin_filter': 'DrupalDatabaseCache',
          'cache_bin_form': 'DrupalDatabaseCache',
          'cache_bin_menu': 'DrupalDatabaseCache',
          'cache_bin_page': 'DrupalDatabaseCache',
          'cache_bin_session': 'DrupalDatabaseCache',
          'cache_bin_update': 'DrupalDatabaseCache',
          'cache_bin_users': 'DrupalDatabaseCache',
          'cache_bin_views': 'DrupalDatabaseCache',
          'cache_bin_views_data': 'DrupalDatabaseCache',
          'cache_bin_path': 'DrupalDatabaseCache',
          'cache_bin_tokens': 'DrupalDatabaseCache',
          'cache_bin_rules': 'DrupalDatabaseCache',
          'cache_bin_field': 'DrupalDatabaseCache',
          'cache_bin_entity': 'DrupalDatabaseCache'
      }
  },
  "apache_opts": {
    "vh_in_template_source": "salt://makina-states/files/projects/drupal/in_virtualhost.conf",
    "extra_jinja_apache_variables": {
         "appConnTimeout": 30,
         "idleTimeout": 60,
         "allowed_files": "update.php|index.php|install.php|xmlrpc.php|cron.php"
    },
  },
  "fpmpool_opts": {
      "open_basedir_additions": (
          ":{project_root}/www"
          ":{project_root}/lib"
          ":{project_root}/var/tmp"
          ":{project_root}/var/private"
          ),
      "include_path_additions": (
          ":{project_root}/www"
          ":{project_root}/lib"
      ),
      "settings": {
            "session_auto_start": False,
            "allow_url_fopen": True,
            "display_errors": False,
            "memory_limit": "256M",
            "upload_max_filesize": "500M",
            "max_input_vars": 1000,
            "modules": {
              "apc": {
                  "user_entries_hint": 1000,
                  "num_files_hint": 2000,
                  "ttl": 0,
                  "user_ttl": 300,
                  "gc_ttl": 0,
                  "shm_size": "64M"
               }
            }
      }
  }
} %}
{%- set default_env_defaults = {
    "dev": {
        "drupal_opts": {
            "local_settings": {
                "caching": False,
            }
        },
        "fpmpool_opts": {
            "settings": {
                "display_errors": True,
            }
        }
    },
    "prod": {
        "drupal_opts": {
            "local_settings": {
            }
        },
        "vhost_log": "info",
    }
 } %}
 
{# PSEUDO -MAIN --------------------------------------------------------------#}
{# Makina project per project macro couple (install_drupal/install_project)   #}
{# called by main ------------------------------------------------------------#}
{%- macro install_drupal_project_do(common) %}
{{common.name}}-rootdir-dirs:
  mc_proxy.hook: []

{#    install mysql only if we have the db role enabled #}
{#    warn: db should be created with grants before the install in drupal_app #}
{%-   if common.data.has_db %}
{{-     drupal_db(common)}}
{%-   endif %}
{# install http/php only if we have the app role enabled #}
{%-   if common.data.has_app %}
{{-     drupal_pkgs(common)}}
{{-     drupal_app(common)}}
{{-     drupal_crons(common) }}
{%-   endif %}
{{    fix_perms(common) }}
{%- endmacro %}

{# TODO: manage group depending on ngin/Apache and maybe others #}

{# ---------------- MAIN -----------------------------------------------------#}
{# Look available arguments in _modules/mc_project.py:get_common_vars 
 and set all the includes before running all macros
 Several modes are available:
  - APP: nginx + php-fpm
  - APP: apache + php-fpm
  - APP: apache + mod_php (old classical way)
  - DB: mysql or postgresql .#}
{%- macro install_drupal_project() %}
{#- Add our specific project variables: Theses are not shared projects variables #}
{# and are not managed by mc_project.get_common_vars, so we add it on the default dict #}
{%- do default_defaults.update({'use_nginx': kwargs.use_nginx,
  'use_apache': kwargs.use_apache,
  'use_htaccess': kwargs.use_htaccess,
  'use_phpfpm': kwargs.use_phpfpm,
  'use_mysql': kwargs.use_mysql,
  'use_postgresql': kwargs.use_postgresql,
  'init': kwargs.init,
  'make': kwargs.make
  }) %}
{%-  do kwargs.setdefault("defaults", default_defaults) %}
{%-  do kwargs.setdefault("env_defaults", default_env_defaults) %}
{%-  do kwargs.setdefault("user", "drupal") %}
{%-  set common = salt["mc_project.get_common_vars"](*varargs, **kwargs) %}
{%-    if common.data.use_nginx %}
{%-     set php_sls_path = "makina-states.services.php.phpfpm_with_nginx" %}
{%-    else %}
{%-      if common.data.use_phpfpm %}
{%-        set php_sls_path = "makina-states.services.php.phpfpm_with_apache" %}
{%-      else %}
{%-        set php_sls_path = "makina-states.services.php.modphp" %}
{%-      endif %}
{%-    endif %}
{%-    if common.data.use_postgresql %}
{%-     set db_sls_path = "makina-states.services.db.postgresql" %}
{%-    else %}
{%-     set db_sls_path = "makina-states.services.db.mysql" %}
{%-    endif %}
{%-    if common.data.has_app %}
{%-      do common.sls_includes.extend([php_sls_path,])%}
{%-    endif %}
{#%-    if common.data.has_db %#}
{#%-      do common.sls_includes.extend([db_sls_path,])%#}
{#%-    endif %#}
{{-  base.install_project(common, install_macro=install_drupal_project_do) }}
{%- endmacro %}
{# vim: set nofoldenable :#}
