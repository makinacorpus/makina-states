{% set cops = salt['mc_locations.settings']().cops %}
{% set ns = salt['mc_nodejs.settings']() %}
{% set nv = ns.version_via_corpusops %}
{% macro deliver_config_files(confs,
                              prefix='config-',
                              dir='makina-states/files',
                              after_macro=None,
                              user='root',
                              target_prefix="",
                              group='root',
                              mode=750,
                              makedirs=True,
                              template='jinja') %}
{# retrocompatible kwargs access, either from direct in the template or from the "data" variable #}
{% set inline_jkwargs = salt['mc_utils.deepcopy'](kwargs) %}
{% do inline_jkwargs.pop('data', None) %}
{% do inline_jkwargs.update({'data': kwargs}) %}

{% for f, fdata in confs.items() %}
{% set templated = fdata.get('template', template) %}
{% if 'source' not in fdata %}
{% set source = 'salt://{0}{1}'.format(dir, f) %}
{% else %}
{% set source = fdata['source'] %}
{% endif %}

{{prefix}}{{f}}:
  file.managed:
    - name: "{{fdata.get('target', "{0}{1}".format(target_prefix, f))}}"
    {% if source%}- source: "{{source}}"{%endif%}
    - mode: "{{fdata.get('mode', mode)}}"
    - user: "{{fdata.get('user', user)}}"
    - group:  "{{fdata.get('group', group)}}"
    {% if kwargs %}
    - context: {{inline_jkwargs | json }}
    {% endif %}
    {% if fdata.get('makedirs', makedirs) %}
    - makedirs: true
    {% endif %}
    {% if templated %}
    - template: "{{templated}}"
    {%else %}
    - template: false
    {%endif%}
{% if after_macro %}{{ after_macro() }}{% endif %}
{% endfor %}
{% endmacro %}


{% macro repomanaged(name,
                     file,
                     dist=none,
                     key=none,
                     key_url=none,
                     cleanup_pattern=none,
                     suf=none,
                     before_macro=none,
                     after_macro=none) %}
{% if not cleanup_pattern %}{% set cleanup_pattern = name.split()[1] %}{% endif%}
{% if not suf %}{% set suf='repomanaged-{0}-{1}'.format(name, file).replace(':', '-') %}{% endif %}
"repomanaged-{{suf}}":
{% if cleanup_pattern %}
  cmd.run:
{# remove old urls #}
{% if before_macro %}{{before_macro()}}{% endif %}
    - watch_in:
      - pkgrepo: "repomanaged-{{suf}}"
    - name: sed -i -re "\#{{cleanup_pattern}}# d" "{{file}}" && echo changed=false
    - onlyif: test  -e "{{file}}"
    - stateful: true
{% endif %}
  pkgrepo.managed:
    - retry: {attempts: 6, interval: 10}
    - name: "{{name}}"
    - file: "{{file}}"
    {% if dist %}- dist: "{{dist}}"{% endif %}
    {% if key_url %}- key_url: "{{key_url}}"{% endif %}
    {% if key %}- key: "{{key}}"{% endif %}
{% if after_macro %}{{after_macro()}}{% endif %}
{% endmacro %}


{# DEPRECATED but never ever remove this file to not break api v1#}
{% macro proxy(name, text='') %}
{{name}}:
  mc_proxy.hook:
    - name: {{name}}
{{text}}
{% endmacro %}
{% set dummy = proxy %}


{% macro retry_apt_get(name, pref='', suf='', rmacro=none,
                       pkgs=None, pkg=None,
                       require_knob='require_in',
                       update=True, fromrepo=None,
                       install_function='pkg.latest') %}
{%- if not pkgs %}
{%- set pkgs = [] %}
{%- endif %}
{%- if pkg and (pkg not in pkgs) %}{% do pkgs.append(pkg) %} {% endif %}
{%- set install_module = install_function.split('.')[0] %}
{{pref}}{{name}}{{suf}}:
  {{install_function}}:
    - pkgs: {{pkgs}}
    {% if fromrepo %}
    - fromrepo: {{ fromrepo }}
    {% endif %}
    {% if rmacro %}
    {{ rmacro() }}
    {% endif %}
{% if update %}
{{pref}}{{name}}aptgetretry-update{{suf}}:
  cmd.run:
    - name: |
            set -ex
            apt-get update
            for i in {{ ' '.join(pkgs) }};do
              apt-cache madison $i
            done
    - onfail_stop: false
    - onfail:
      - {{install_module}}: {{pref}}{{name}}{{suf}}
    - {{require_knob}}:
      - {{install_module}}: {{pref}}{{name}}aptgetretry-retry{{suf}}
    {% if rmacro %}
    {{ rmacro() }}
    {% endif %}
{% endif %}
{{pref}}{{name}}aptgetretry-retry{{suf}}:
  {{install_function}}:
    - pkgs: {{pkgs}}
    {% if fromrepo %}
    - fromrepo: {{ fromrepo }}
    {% endif %}
    - onfail_stop: false
    - onfail:
      - {{install_module}}: {{pref}}{{name}}{{suf}}
    {% if rmacro %}
    {{ rmacro() }}
    {% endif %}
{% endmacro %}


{#
 # wrapper to service restart/reload that also ensure that systemd is reloaded
 # if case of the first activation fails
 # after a unit change and also works if service_function==None
 # for docker mode where we use another processes manager like circus
 #}
{% macro service_restart_reload(
    unit,
    service_function='service.running',
    pref='',
    enable='none',
    force_reload=false, force_restart=false,
    reload=True, reload_macro=none,
    restart=True, restart_macro=none) %}
{% if enable == 'none' %}
{% set enable = salt['mc_services_managers.get_service_enabled_state'](service_function) %}
{% endif %}
{% if service_function %}
{% if reload %}
{% if force_reload %}
makina-{{pref}}-{{unit}}-reload-force:
  cmd.run:
    - name: echo "force"
{% endif %}
makina-{{pref}}-{{unit}}-reload-reload-systemd:
  cmd.watch:
    - name: |
            if ! which systemctl >/dev/null 2>&1;then exit 0;fi
            if ! systemctl show {{unit}};then exit 0;fi
            systemctl daemon-reload
  {% if reload_macro %}{{reload_macro()}}{%endif%}
makina-{{pref}}-{{unit}}-service-o:
  mc_proxy.hook:
    - require:
        - cmd: makina-{{pref}}-{{unit}}-reload-reload-systemd
    - require_in:
        - {{service_function.split('.')[0]}}: makina-{{pref}}-{{unit}}-service
makina-{{pref}}-{{unit}}-service:
  {{service_function}}:
    - name: {{unit}}
    - enable: {{enable}}
    - reload: true
    - onfail_in:
      - cmd: fail-makina-{{pref}}-{{unit}}-service
      - service: fail-makina-{{pref}}-{{unit}}-service
  {% if not force_reload %}
  {% if reload_macro %}{{reload_macro()}}{%endif%}
  {% else %}
    - watch:
      - cmd: makina-{{pref}}-{{unit}}-reload-force
  {% endif %}
fail-makina-{{pref}}-{{unit}}-service:
  cmd.run:
    - name: systemctl daemon-reload
    - onfail_stop: false
    - onlyif: "systemctl show {{unit}}"
  {% if reload_macro %}{{reload_macro()}}{%endif%}
  {{service_function}}:
    - name: {{unit}}
    - enable: {{enable}}
    - reload: true
    - onfail_stop: false
    - require:
      - cmd: fail-makina-{{pref}}-{{unit}}-service
  {% if reload_macro %}{{reload_macro()}}{%endif%}
{% endif %}

{% if restart %}
{% if force_restart %}
makina-{{pref}}-{{unit}}-restart-force:
  cmd.run:
    - name: echo "force"
{% endif %}
makina-{{pref}}-{{unit}}-restart-reload-systemd:
  cmd.watch:
    - name: |
            if ! which systemctl >/dev/null 2>&1;then exit 0;fi
            if ! systemctl show {{unit}};then exit 0;fi
            systemctl daemon-reload
  {% if restart_macro %}{{restart_macro()}}{%endif%}
makina-{{pref}}-{{unit}}-restart-service-o:
  mc_proxy.hook:
    - require:
        - cmd: makina-{{pref}}-{{unit}}-restart-reload-systemd
    - require_in:
        - {{service_function.split('.')[0]}}: makina-{{pref}}-{{unit}}-restart-service
makina-{{pref}}-{{unit}}-restart-service:
  {{service_function}}:
    - name: {{unit}}
    - enable: {{enable}}
    - onfail_in:
      - cmd: fail-makina-{{pref}}-{{unit}}-restart-service
      - service: fail-makina-{{pref}}-{{unit}}-restart-service
  {% if not force_restart%}
  {% if restart_macro %}{{restart_macro()}}{%endif%}
  {% else %}
    - watch:
      - cmd: makina-{{pref}}-{{unit}}-restart-force
  {% endif %}
fail-makina-{{pref}}-{{unit}}-restart-service:
  cmd.run:
    - name: systemctl daemon-reload
    - onfail_stop: false
    - onlyif: |
              if ! which systemctl >/dev/null 2>&1;then exit 1;fi
              systemctl show {{unit}}
  {% if restart_macro %}{{restart_macro()}}{%endif%}
  {{service_function}}:
    - name: {{unit}}
    - enable: {{enable}}
    - onfail_stop: false
    - require:
      - cmd: fail-makina-{{pref}}-{{unit}}-restart-service
  {% if restart_macro %}{{restart_macro()}}{%endif%}
{% endif %}
{% endif %}
{%endmacro%}

# handle services where service.running cant (missing status function)
# action: start/stop/none
# enable: true/false/none
{% macro toggle_service(service,
                        prefix='',
                        suffix='',
                        action=none,
                        enable=none,
                        level=none,
                        service_function=none,
                        after_fallback_macro=none,
                        after_service_macro=none,
                        before_macro=none,
                        after_macro=none) %}
{% set systemd_action = none %}
{% set sysv_toggle_action = none %}
{% if action in [True, False] %}
{%  if action %}{% set action = 'start' %}
{%  else %}{% set action = 'stop' %}
{%  endif %}
{% endif %}
{% if service_function is none %}
{%  if action == 'start' %}{% set service_function = 'service.running' %}
{%  elif action == 'stop' %}{% set service_function = 'service.dead' %}
{%  endif %}
{% endif %}
{% if enable is none %}
{%  if action == 'stop' %}{%   set enable = False %}
{%  elif action == 'start' %}{%   set enable = True %}
{%  endif %}
{% endif %}
{% if enable is not none %}
{%  if enable %}
{%   set systemd_action = 'enable' %}
{%   set sysv_toggle_action = 'defaults {0}'.format(level) %}
{%  else %}
{%   set systemd_action = 'disable' %}
{%   set sysv_toggle_action = 'remove' %}
{%  endif %}
{% endif %}
{% if not level %}{%  set level= '99' %}{% endif %}
{% if before_macro is not none %}{{ before_macro() }}{% endif %}
{% if service_function %}
{{prefix}}toggle-service-{{service}}{{suffix}}:
  {{service_function}}:
    - name: {{service}}
    {% if enable is not none %}
    - enable: {{enable}}
    {% endif %}
    - onfail_in:
      - cmd: {{prefix}}toggle-service-{{service}}{{suffix}}-fallback
{% if after_service_macro is not none %}{{ after_service_macro() }}{% endif %}
{% if after_macro is not none %}{{ after_macro() }}{% endif %}
{% endif %}
{{prefix}}toggle-service-{{service}}{{suffix}}-fallback:
  cmd.run:
    - onfail_stop: false
    - name: |
        sret=0;ret=0;vret=0
        systemd_exists=""
        {% if action %}
          if ( hash -r systemctl >/dev/null 2>&1 );then
            systemd_exists="1"
            if ( systemctl is-enabled -q --no-pager {{service}} 2>&1 \
                  | egrep -q "Failed to get unit file|not-found|unrecognized service|Unit .*service not loaded" ); then
              systemd_exists=""
            fi
          fi
          if ( hash -r service >/dev/null 2>&1 );then
            if ! ( service {{service}} status 2>&1 | egrep -q "could not be found|not-found|unrecognized service|Unit .*service not loaded" ); then
              service {{service}} {{action}}
            fi
          elif [ "x${systemd_exists}" != "x" ];then
            systemctl {{action}} {{service}}
          fi
          ret=$?
          if [ "x${ret}" != "x0" ];then
            echo "error while {{action}} service {{service}}"
          fi
        {% endif %}
        {% if systemd_action %}
          if ( hash -r systemctl >/dev/null 2>&1 );then
            {% set invert_test = '' %}
            {% if systemd_action == 'enable' %}
            {%  set invert_test = '!' %}
            {% endif %}
            if [ "x${systemd_exists}" != "x"  ] && {{invert_test }} \
              ( systemctl is-enabled -q --no-pager {{service}} >/dev/null 2>&1 );then
              systemctl {{systemd_action}} {{service}}
              sret=$?
              if [ "x${sret}" != "x0" ];then
                echo "error while doing: {{systemd_action}} service: {{service}} (systemd)"
              fi
            fi
          fi
        {% endif %}
        {% if sysv_toggle_action %}
          if ( hash -r update-rc.d );then
            update-rc.d -f {{service}} {{sysv_toggle_action}}
            vret=$?
            if [ "x${vret}" != "x0" ];then
              echo "error while doing: {{sysv_toggle_action}} service {{service}} (sysv)"
            fi
          fi
        {% endif %}
        for i in ${ret} ${sret} ${vret};do
          if [ "x${i}" != "x0" ];then
            exit ${i}
          fi
        done
        exit 0
{% if after_fallback_macro is not none %}{{ after_fallback_macro() }}{% endif %}
{% if after_macro is not none %}{{ after_macro() }}{% endif %}
{% endmacro%}

{% macro cops_default_install(role, configure) %}
            if [ -e {{cops}}/roles/corpusops.roles/{{role}} ];then
              cd {{cops}}/roles/corpusops.roles/{{role}}
            fi
            if [ -e {{cops}}/roles/{{role}} ];then
              cd {{cops}}/roles/{{role}}
            fi
            {{cops}}/bin/cops_apply_role role.yml \
               {% if configure is not none %}-e @local/makinastates.yml {% endif %}
{% endmacro%}

{% macro install_via_cops(role, configure=none, install=none) %}
{{role}}-dummy-pre:
  mc_proxy.hook: []
{% if install is none %}{% set install = cops_default_install %}{%endif %}

{{role}}-upgrade:
  cmd.run:
    - name: {{cops}}/bin/install.sh -C -s
    - require:
      - mc_proxy: {{role}}-dummy-pre
    - onlyif: test ! -e {{cops}}/roles/corpusops.roles/{{role}} && test ! -e {{cops}}/roles/{{role}}
{{role}}-config1-via-corpusops:
  file.managed:
    - name: {{cops}}/roles/{{role}}/local/makinastates.yml
    - onlyif: test -e {{cops}}/roles/{{role}}
    - makedirs: true
    - mode: 640
    - require:
      - mc_proxy: {{role}}-dummy-pre
{% if configure is not none %}{{ configure() }}{% endif %}
{{role}}-config2-via-corpusops:
  file.managed:
    - name: {{cops}}/roles/corpusops.roles/{{role}}/local/makinastates.yml
    - onlyif: test -e {{cops}}/roles/corpusops.roles/{{role}}
    - makedirs: true
    - mode: 640
    - require:
      - mc_proxy: {{role}}-dummy-pre
{% if configure is not none %}{{ configure() }}{% endif %}
{{role}}-install-via-corpusops:
  cmd.run:
    - name: |
{{ install(role, configure) }}
    - require:
      - mc_proxy: {{role}}-dummy-pre
    - require_in:
      - mc_proxy: {{role}}-dummy-post
    - watch:
      - mc_proxy: corpusops-checkouts-post
      - cmd: {{role}}-upgrade
{% if configure is not none %}
      - file: {{role}}-config1-via-corpusops
      - file: {{role}}-config2-via-corpusops
{% endif %}
{{role}}-install-node-via-corpusops-retry:
  cmd.run:
    - name: |
{{ install(role, configure) }}
    - onfail_stop: false
    - onfail:
      - cmd: {{role}}-install-via-corpusops
    - require_in:
      - mc_proxy: {{role}}-dummy-post
{{role}}-dummy-post:
  mc_proxy.hook: []
{% endmacro %}
{% macro nvm_use(nvmdir='/srv/apps/nvm-latest', node_version=none) %}export NVMDIR="{{nvmdir}}" && export NVM_DIR="{{nvmdir}}" && {% if node_version is none %}{% set node_version=ns%}{% endif %}node_version="{{node_version}}" && if ( nvm --help 2>/dev/null );then nvm deactivate;fi && if [[ -z "{{node_version}}" ]] && [[ -e .nvmrc ]];then node_version=$(cat .nvmrc) ;fi && . "$NVMDIR/nvm.sh" && if ! ( nvm use $node_version );then nvm install $node_version;fi && nvm use $node_version{% endmacro %}
{# vim: set nofoldenable #}
