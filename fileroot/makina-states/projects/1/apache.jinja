{#
# DEPRECATED PROJECT STYLE -- USE APIV2
#
#}
{%- import "makina-states/services/http/apache/init.sls" as apache with context %}
{%- import "makina-states/projects/1/base.jinja" as base with context %}
{%- set base = base %}
{%- set apache = apache %}
{%- set services = base.services %}
{%- set apacheData = salt['mc_apache.settings']().copy() %}
{%- set saltmac = base.saltmac %}
{%- set locations = salt['mc_locations.settings']() %}

{#
# This is not really a real project but more stubs usable from other projects
# to serve to generate a robust virtualhost apache based installation
# both as usage exemple and macro re-use
# See:
# - https://github.com/makinacorpus/salt-project/tree/apache-project
# - https://github.com/makinacorpus/salt-project/tree/apache-salt
#}
{% macro virtualhost(domain,
                     project=None,
                     project_root=None,
                     doc_root=None,
                     apache_opts=None,
                     additionnal_macro=None,
                     additionnal_opts=None,
                     minimal_index=None,
                     mode='unkown',
                     includes=False) %}
{% set doc_root = salt['mc_project.doc_root'](doc_root=doc_root,
                                              domain=domain,
                                              project_root=project_root,
                                              project=project) %}
{% set args = {
   'domain': domain,
   'project_root': project_root,
   'doc_root': doc_root,
   'project': project
} %}


{% if not apache_opts %}
{%     set apache_opts = {} %}
{% endif %}
{% if not additionnal_opts %}
{%    set additionnal_opts = {} %}
{% endif %}
{% for opts in [additionnal_opts, apache_opts] %}
{%    do opts.update(args)  %}
{% endfor %}

{# execute nested macro if any (used by php #}
{% if additionnal_macro %}
{{    additionnal_macro(**additionnal_opts) }}
{% endif %}

{# Custom Apache Virtualhost #}
{{ apache.virtualhost(**apache_opts) }}

{# very minimal index.php file #}
{% if minimal_index %}
{{    minimal_index(doc_root, domain=domain, mode=mode) }}
{% endif %}
{% endmacro %}

{#
# Data dictionnaries that feed the "common.data" dictionnary
# This is one of the most difficult part to understand, idea is to
#}
{%- set default_defaults = {
  'apache_opts': {},
} %}

{% set default_env_defaults = {
   'dev': {},
   'prod': {}
} %}

{#-
#  Makina project per project macro couple (install_apache_project/install_project)
#  This will install an apache virtualhost serving in project_root/www for the
#  configured domain(s)
#
#  The next macro is waiting at least for the "apache_opts" dict to be feeded with 
#  parameters to give to the _macros/apache.jinja macros
#
#
#}


{% macro vhost_from_common_data(common) %}
{% do common.data.apache_opts.setdefault('server_aliases',
                                         common.alternate_domains) %}
{{ virtualhost(domain=common.domain,
               project_root=common.project_root,
               apache_opts=common.data.apache_opts,
               mode=common.default_env, **kwargs) }}
{%- endmacro %}

{% macro install_apache_project_do(common) %}
{{ vhost_from_common_data(common, minimal_index=apache.minimal_index) }}
{%- endmacro %}

{#- Look available arguments in _modules/mc_project.py:get_commmon_vars #}
{%- macro install_apache_project() %}
{%- do kwargs.setdefault('defaults', default_defaults) %}
{%- do kwargs.setdefault('env_defaults', default_env_defaults) %}
{%- do kwargs.setdefault('user', 'apache') %}
{%- set common = salt['mc_project.get_common_vars'](*varargs, **kwargs) %}
{%- do common.sls_includes.append('makina-states.services.http.apache')%}
{{- base.install_project(common, install_macro=install_apache_project_do) }}
{% endmacro %}
{# vim: set nofoldenable :#}
