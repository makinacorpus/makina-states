#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import os
import json
from ansible.module_utils.basic import *

DOCUMENTATION = '''
---
module: saltcall
version_added: "0.1"
short_description: wrapper to makina-states salt-call 'saltcaller' script
description:
    - call salt-call
    - thie module can use two modes of execution either by
      using the embedded (and maybe stale) saltcaller script
      or by using the original script on the filesystem if
      present and found.
options:
    function: exec module/fun to call
    args: positional/name args (salt cli formated)

TO maintainers:
    - do not edit saltcall.py but saltcall.py.in
    - run hacking/gen_ansible_saltcaller.py to
      refresh the SALTCALLER SLOT from saltcall.py.in
      and regerenerate saltcall.py
'''

EXAMPLES = '''
- action: saltcall \
        function=state.sls args='["makina-states.cloud.generic.dnsconf"]'
'''

# generated via hacking/gen_ansible_saltcaller.py
# this embeds the saltcaller script inside the ansible module
# but not in plain text as ansible would quote it
SALTCALLER = """
Cgpmcm9tIF9fZnV0dXJlX18gaW1wb3J0IGFic29sdXRlX2ltcG9ydApmcm9tIF9fZnV0dXJlX18gaW1wb3J0IGRpdmlzaW9uCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgcHJpbnRfZnVuY3Rpb24KJycnCgouLiBfbWNfc3RhdGVzX3NhbHRjYWxsZXI6Cgp3cmFwcGVycyB0byBzYWx0IHNoZWxsIGNvbW1hbmRzCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKVGhpcyBpcyBub3QgaW5jbHVkZWQgaW4gYSBzYWx0IG1vZHVsZSBhbmQgaXNvbGF0ZWQgdG8gYmUKcGlja2xhYmxlIGFuZCB1c2VkIHRob3JvdWdoIHB5dGhvbiBtdWx0aXByb2Nlc3NpbmcgYXMgYSB0YXJnZXQKCgpUaGUgbW9kdWxlIGhhcyByZWR1bmRhbnQgZnVuY3Rpb25zIHdpdGggdGhlIG1ha2luYS1zdGF0ZXMgY29kZWJhc2UgYnV0IHRoZSBnb2FsIGlzIHRoYXQgaXQgaXMgc2VsZmNvbnRhaW5lZCBhbmQgZGVwZW5kZW5jeSBsZXNzLgoKJycnCgppbXBvcnQgc2hsZXgKaW1wb3J0IGFyZ3BhcnNlCmltcG9ydCBjb3B5Cgp0cnk6CiAgICBpbXBvcnQgY1N0cmluZ0lPCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIGltcG9ydCBpbyBhcyBjU3RyaW5nSU8KaW1wb3J0IG9zCmltcG9ydCBwaXBlcwppbXBvcnQgc3VicHJvY2VzcwppbXBvcnQgc3lzCmltcG9ydCBzaXgKaW1wb3J0IHRpbWUKaW1wb3J0IHRyYWNlYmFjawppbXBvcnQgbG9nZ2luZwppbXBvcnQgZmNudGwKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBqc29uCgoKdHJ5OgogICAgaW1wb3J0IGNoYXJkZXQKICAgIEhBU19DSEFSREVUID0gVHJ1ZQpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBIQVNfQ0hBUkRFVCA9IEZhbHNlCgoKX21hcmtlciA9IG9iamVjdCgpCk5PX1JFVFVSTiA9ICdfX0NBTExFUl9OT19SRVRVUk5fXycKTk9SRVRVUk5fUkVUQ09ERSA9IDUKTk9EQVRBX1JFVENPREUgPSA2Ck5PRElDVF9SRVRDT0RFID0gNwpOT19JTk5FUl9ESUNUX1JFVENPREUgPSA4ClNUQVRFX1JFVF9JU19OT1RfQV9ESUNUX1JFVENPREUgPSAxMQpTVEFURV9GQUlMRURfUkVUQ09ERSA9IDkKVElNRU9VVF9SRVRDT0RFID0gLTY2NgpOT19SRVRDT0RFID0gLTY2OApsb2cgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCgpkZWYganNvbl9sb2FkKGRhdGEpOgogICAgY29udGVudCA9IGRhdGEucmVwbGFjZSgnIC0tLUFOVExJU0xBU0hfTi0tLSAnLCAnXG4nKQogICAgY29udGVudCA9IGpzb24ubG9hZHMoY29udGVudCkKICAgIHJldHVybiBjb250ZW50CgoKZGVmIGpzb25fZHVtcChkYXRhLCBwcmV0dHk9RmFsc2UpOgogICAgaWYgcHJldHR5OgogICAgICAgIGNvbnRlbnQgPSBqc29uLmR1bXBzKAogICAgICAgICAgICBkYXRhLCBpbmRlbnQ9NCwgc2VwYXJhdG9ycz0oJywnLCAnOiAnKSkKICAgIGVsc2U6CiAgICAgICAgY29udGVudCA9IGpzb24uZHVtcHMoZGF0YSkKICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKCdcbicsICcgLS0tQU5UTElTTEFTSF9OLS0tICcpCiAgICByZXR1cm4gY29udGVudAoKCmRlZiBtYWdpY3N0cmluZyh0aGVzdHIpOgogICAgJycnCiAgICBDb252ZXJ0IGFueSBzdHJpbmcgdG8gVVRGLTggRU5DT0RFRCBvbmUKICAgICcnJwogICAgaWYgc3lzLnZlcnNpb25bMF0gPj0gJzMnOgogICAgICAgIHJldHVybiB0aGVzdHIKICAgIGlmIG5vdCBIQVNfQ0hBUkRFVDoKICAgICAgICByZXR1cm4gdGhlc3RyCiAgICBzZWVrID0gRmFsc2UKICAgIGlmICgKICAgICAgICBpc2luc3RhbmNlKHRoZXN0ciwgKGludCwgZmxvYXQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRldGltZS5kYXRlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZXRpbWUudGltZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGV0aW1lLmRhdGV0aW1lKSkKICAgICk6CiAgICAgICAgdGhlc3RyID0gInswfSIuZm9ybWF0KHRoZXN0cikKICAgIGlmIGlzaW5zdGFuY2UodGhlc3RyLCBzaXgudGV4dF90eXBlKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRoZXN0ciA9IHRoZXN0ci5lbmNvZGUoJ3V0Zi04JykKICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICBzZWVrID0gVHJ1ZQogICAgaWYgc2VlazoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGRldGVjdGVkZW5jID0gY2hhcmRldC5kZXRlY3QodGhlc3RyKS5nZXQoJ2VuY29kaW5nJykKICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICBkZXRlY3RlZGVuYyA9IE5vbmUKICAgICAgICBpZiBkZXRlY3RlZGVuYzoKICAgICAgICAgICAgc2RldGVjdGVkZW5jID0gZGV0ZWN0ZWRlbmMubG93ZXIoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNkZXRlY3RlZGVuYyA9ICcnCiAgICAgICAgaWYgc2RldGVjdGVkZW5jLnN0YXJ0c3dpdGgoJ2lzby04ODU5Jyk6CiAgICAgICAgICAgIGRldGVjdGVkZW5jID0gJ0lTTy04ODU5LTE1JwoKICAgICAgICBmb3VuZF9lbmNvZGluZ3MgPSBbCiAgICAgICAgICAgICdJU08tODg1OS0xNScsICdUSVMtNjIwJywgJ0VVQy1LUicsCiAgICAgICAgICAgICdFVUMtSlAnLCAnU0hJRlRfSklTJywgJ0dCMjMxMicsICd1dGYtOCcsICdhc2NpaScsCiAgICAgICAgXQogICAgICAgIGlmIHNkZXRlY3RlZGVuYyBub3QgaW4gKCd1dGYtOCcsICdhc2NpaScpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZSh0aGVzdHIsIHNpeC50ZXh0X3R5cGUpOgogICAgICAgICAgICAgICAgICAgIHRoZXN0ciA9IHRoZXN0ci5kZWNvZGUoZGV0ZWN0ZWRlbmMpCiAgICAgICAgICAgICAgICB0aGVzdHIgPSB0aGVzdHIuZW5jb2RlKGRldGVjdGVkZW5jKQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICAgICAgZm9yIGlkeCwgaSBpbiBlbnVtZXJhdGUoZm91bmRfZW5jb2RpbmdzKToKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKHRoZXN0ciwgc2l4LnRleHRfdHlwZSkgYW5kIGRldGVjdGVkZW5jOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlc3RyID0gdGhlc3RyLmRlY29kZShkZXRlY3RlZGVuYykKICAgICAgICAgICAgICAgICAgICAgICAgdGhlc3RyID0gdGhlc3RyLmVuY29kZShpKQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlkeCA9PSAobGVuKGZvdW5kX2VuY29kaW5ncykgLSAxKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICBpZiBpc2luc3RhbmNlKHRoZXN0ciwgc2l4LnRleHRfdHlwZSk6CiAgICAgICAgdGhlc3RyID0gdGhlc3RyLmVuY29kZSgndXRmLTgnKQogICAgdGhlc3RyID0gdGhlc3RyLmRlY29kZSgndXRmLTgnKS5lbmNvZGUoJ3V0Zi04JykKICAgIHJldHVybiB0aGVzdHIKCgpkZWYgdGVybWluYXRlKHByb2Nlc3MpOgogICAgZm9yIGkgaW4gWyd0ZXJtaW5hdGUnLCAna2lsbCddOgogICAgICAgIHRyeToKICAgICAgICAgICAgZ2V0YXR0cihwcm9jZXNzLCBpKSgpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgcGFzcwoKCmRlZiBkb192YWxpZGF0ZV9zdGF0ZXMoZGF0YSwgcmV0Y29kZV9wYXNzdGhyb3VnaD1Ob25lLCByZXRjb2RlPU5vbmUpOgogICAgaWYgbm90IGRhdGE6CiAgICAgICAgcmV0dXJuIE5PREFUQV9SRVRDT0RFCiAgICBpZiBub3QgaXNpbnN0YW5jZShkYXRhLCBkaWN0KToKICAgICAgICByZXR1cm4gTk9ESUNUX1JFVENPREUKICAgIHRyeToKICAgICAgICAjIGlmIHdlIHNldCByY19wYXNzdGhyb3VnaChkZWZhdWx0KQogICAgICAgICMgYW5kIHdlIGdvdCBhIHdlbGwga25vd24gcmV0dXJuIGNvZGUsIHRoZW4gdXNlIGl0CiAgICAgICAgcmMgPSBpbnQocmV0Y29kZSkKICAgICAgICBhc3NlcnQgcmMgaW4gWzAsIDJdIGFuZCByZXRjb2RlX3Bhc3N0aHJvdWdoCiAgICAgICAgcmV0dXJuIHJjCiAgICBleGNlcHQgQXNzZXJ0aW9uRXJyb3I6CiAgICAgICAgcGFzcwogICAgIyBlbHNlIHRyeSB0byBnZXQgb3Vyc2VsdmVzIGlmIGV2ZXJ5dGhpbmcgZGlkIGdvbmUgd2VsbAogICAgZm9yIGksIHJkYXRhIGluIGRhdGEuaXRlbXMoKToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShyZGF0YSwgZGljdCk6CiAgICAgICAgICAgIHJldHVybiBOT19JTk5FUl9ESUNUX1JFVENPREUKICAgICAgICBmb3Igaiwgc3RhdGVkYXRhIGluIHJkYXRhLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKHN0YXRlZGF0YSwgZGljdCk6CiAgICAgICAgICAgICAgICByZXR1cm4gU1RBVEVfUkVUX0lTX05PVF9BX0RJQ1RfUkVUQ09ERQogICAgICAgICAgICBlbGlmIHN0YXRlZGF0YS5nZXQoJ3Jlc3VsdCcsIE5vbmUpIGlzIEZhbHNlOgogICAgICAgICAgICAgICAgaWYgbm90IHJldGNvZGVfcGFzc3Rocm91Z2g6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRF9SRVRDT0RFCiAgICByZXR1cm4gMAoKCmRlZiBmYWlsZWQocmV0LCBlcnJvcj1Ob25lKToKICAgIHJldFsnc3RhdHVzJ10gPSByZXRbJ3JldGNvZGUnXSA9PSAwCiAgICBpZiBlcnJvciBpcyBub3QgTm9uZSBhbmQgbm90IHJldFsnc3RhdHVzJ106CiAgICAgICAgcmV0WydlcnJvciddID0gZXJyb3IKICAgIGlmIHJldFsnZXJyb3InXToKICAgICAgICByZXRbJ2Vycm9yJ10gPSBtYWdpY3N0cmluZyhyZXRbJ2Vycm9yJ10pCiAgICByZXR1cm4gcmV0CgoKZGVmIG5vbl9ibG9ja19yZWFkKG91dHB1dCk6CiAgICB0cnk6CiAgICAgICAgZmQgPSBvdXRwdXQuZmlsZW5vKCkKICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgIHJldHVybiAiIgogICAgZWxzZToKICAgICAgICBmbCA9IGZjbnRsLmZjbnRsKGZkLCBmY250bC5GX0dFVEZMKQogICAgICAgIGZjbnRsLmZjbnRsKGZkLCBmY250bC5GX1NFVEZMLCBmbCB8IG9zLk9fTk9OQkxPQ0spCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gb3V0cHV0LnJlYWQoKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHJldHVybiAiIgoKCmRlZiBkb19wcm9jZXNzX2lvcyhwcm9jZXNzLAogICAgICAgICAgICAgICAgICAgdmVyYm9zZT1GYWxzZSwKICAgICAgICAgICAgICAgICAgIG91dHB1dF9vdXQ9c3lzLnN0ZG91dCwKICAgICAgICAgICAgICAgICAgIG91dHB1dF9lcnI9c3lzLnN0ZGVyciwKICAgICAgICAgICAgICAgICAgIHN0ZG91dF9wb3M9Tm9uZSwKICAgICAgICAgICAgICAgICAgIHN0ZGVycl9wb3M9Tm9uZSwKICAgICAgICAgICAgICAgICAgIHN0ZG91dD1Ob25lLAogICAgICAgICAgICAgICAgICAgc3RkZXJyPU5vbmUpOgogICAgaWYgc3Rkb3V0IGlzIE5vbmU6CiAgICAgICAgc3Rkb3V0ID0gY1N0cmluZ0lPLlN0cmluZ0lPKCkKICAgIGlmIHN0ZGVyciBpcyBOb25lOgogICAgICAgIHN0ZGVyciA9IGNTdHJpbmdJTy5TdHJpbmdJTygpCiAgICBzdHJlYW1zID0geydvdXQnOiBzdGRvdXRfcG9zLCAnZXJyJzogc3RkZXJyX3Bvc30KICAgIHN0ZG8gPSBub25fYmxvY2tfcmVhZChwcm9jZXNzLnN0ZG91dCkKICAgIHN0ZGUgPSBub25fYmxvY2tfcmVhZChwcm9jZXNzLnN0ZGVycikKICAgIGZvciBzb3V0LCBwaXBlIGluIChzdGRvLCBzdGRvdXQpLCAoc3RkZSwgc3RkZXJyKToKICAgICAgICBpZiBzb3V0OgogICAgICAgICAgICBvdXQgPSB1JycKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgb3V0ID0gc291dC5kZWNvZGUoKQogICAgICAgICAgICBleGNlcHQgKFVuaWNvZGVFbmNvZGVFcnJvciwgVW5pY29kZURlY29kZUVycm9yKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBvdXQgPSBzb3V0LmRlY29kZSgndXRmLTgnKQogICAgICAgICAgICAgICAgZXhjZXB0IChVbmljb2RlRW5jb2RlRXJyb3IsIFVuaWNvZGVEZWNvZGVFcnJvcik6CiAgICAgICAgICAgICAgICAgICAgb3V0ID0gJ0VSUk9SIHdoaWxlIGRlY29kaW5nIG91dHB1dCcKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcGlwZS53cml0ZShvdXQpCiAgICAgICAgICAgIGV4Y2VwdCAoVW5pY29kZUVuY29kZUVycm9yLCBVbmljb2RlRGVjb2RlRXJyb3IpOgogICAgICAgICAgICAgICAgcGlwZS53cml0ZShtYWdpY3N0cmluZyhvdXQpKQogICAgZm9yIGssIHZhbCwgb3V0IGluICgKICAgICAgICAoJ291dCcsIHN0ZG91dC5nZXR2YWx1ZSgpLCBvdXRwdXRfb3V0KSwKICAgICAgICAoJ2VycicsIHN0ZGVyci5nZXR2YWx1ZSgpLCBvdXRwdXRfZXJyKSwKICAgICk6CiAgICAgICAgaWYgbm90IHZhbDoKICAgICAgICAgICAgY29udGludWUKICAgICAgICBwb3MgPSBzdHJlYW1zW2tdCiAgICAgICAgbnBvcyA9IGxlbih2YWwpIC0gMQogICAgICAgIGlmIHZhbCBhbmQgKChwb3MgPT0gMCkgb3IgKG5wb3MgIT0gcG9zKSk6CiAgICAgICAgICAgIGlmIHZlcmJvc2U6CiAgICAgICAgICAgICAgICBvdXQud3JpdGUodmFsW3BvczpdKQogICAgICAgIHN0cmVhbXNba10gPSBucG9zCiAgICByZXR1cm4gc3RyZWFtc1snb3V0J10sIHN0cmVhbXNbJ2VyciddLCBzdGRvLCBzdGRlCgoKZGVmIGZvcm1hdF9lcnJvcihyZXQpOgogICAgJycnCiAgICBUbyBhdm9pZCBsYXJnZSBtZW1vcnkgdXNhZ2UsIG9ubHkgbGF6eSBmb3JtYXQgZXJyb3JzIG9uIGRlbWFuZAogICAgJycnCiAgICByZXR1cm4gKCcnCiAgICAgICAgICAgICdfX1NBTFRDQUxMRVJfRVJST1Jfe3BpZH1cbicKICAgICAgICAgICAgJ3tlcnJvcn1cbicKICAgICAgICAgICAgJ19fU0FMVENBTExFUl9FTkRfRVJST1Jfe3BpZH1cbicKICAgICAgICAgICAgJycpLmZvcm1hdCgqKnJldCkKCgpkZWYgZm9ybWF0X291dHB1dChyZXQpOgogICAgJycnCiAgICBUbyBhdm9pZCBsYXJnZSBtZW1vcnkgdXNhZ2UsIG9ubHkgbGF6eSBmb3JtYXQgZXJyb3JzIG9uIGRlbWFuZAogICAgJycnCiAgICByZXR1cm4gKCcnCiAgICAgICAgICAgICdfX1NBTFRDQUxMRVJfU1RERVJSX3twaWR9XG4nCiAgICAgICAgICAgICd7c3RkZXJyfVxuJwogICAgICAgICAgICAnX19TQUxUQ0FMTEVSX0VORF9TVERFUlJfe3BpZH1cbicKICAgICAgICAgICAgJ19fU0FMVENBTExFUl9TVERPVVRfe3BpZH1cbicKICAgICAgICAgICAgJ3tzdGRvdXR9XG4nCiAgICAgICAgICAgICdfX1NBTFRDQUxMRVJfRU5EX1NURE9VVF97cGlkfVxuJwogICAgICAgICAgICAnJykuZm9ybWF0KCoqcmV0KQoKCmRlZiBmb3JtYXRfb3V0cHV0X2FuZF9lcnJvcihyZXQpOgogICAgJycnCiAgICBUbyBhdm9pZCBsYXJnZSBtZW1vcnkgdXNhZ2UsIG9ubHkgbGF6eSBmb3JtYXQgZXJyb3JzIG9uIGRlbWFuZAogICAgJycnCiAgICByZXR1cm4gZm9ybWF0X2Vycm9yKHJldCkgKyBmb3JtYXRfb3V0cHV0KHJldCkKCgpkZWYgY21kKGFyZ3MsCiAgICAgICAgdGltZW91dD1Ob25lLAogICAgICAgIHN0ZGluPU5vbmUsCiAgICAgICAgc3Rkb3V0PU5vbmUsCiAgICAgICAgc2xlZXBfaW50ZXJ2YWw9Tm9uZSwKICAgICAgICBzdGRlcnI9Tm9uZSwKICAgICAgICBub19xdW90ZT1Ob25lLAogICAgICAgIHZlcmJvc2U9Tm9uZSwKICAgICAgICBlbnY9Tm9uZSk6CiAgICBpZiBub3Qgc2xlZXBfaW50ZXJ2YWw6CiAgICAgICAgc2xlZXBfaW50ZXJ2YWwgPSAwLjA0CiAgICBpZiBub19xdW90ZSBpcyBOb25lOgogICAgICAgIG5vX3F1b3RlID0gRmFsc2UKICAgIGlmIG5vdCBlbnY6CiAgICAgICAgZW52ID0ge30KICAgIGVudmlyb24gPSBjb3B5LmRlZXBjb3B5KG9zLmVudmlyb24pCiAgICBlbnZpcm9uLnVwZGF0ZShjb3B5LmRlZXBjb3B5KGVudikpCiAgICBub3cgPSB0aW1lLnRpbWUoKQogICAgY2xpID0gW21hZ2ljc3RyaW5nKGEpIGZvciBhIGluIGFyZ3NdCiAgICBvc3BpZCA9IHBpZCA9IG9zLmdldHBpZCgpCiAgICBpZiBub3Qgbm9fcXVvdGU6CiAgICAgICAgY2xpID0gW3BpcGVzLnF1b3RlKGEpIGZvciBhIGluIGNsaV0KICAgIHJldGNvZGUsIGZvcmNlX3JldGNvZGUgPSBOb25lLCBOb25lCiAgICBzdGRvdXRfcG9zLCBzdGRlcnJfcG9zID0gTm9uZSwgTm9uZQogICAgZXJyb3IgPSBOb25lCiAgICBpZiBzdGRvdXQgaXMgTm9uZToKICAgICAgICBzdGRvdXQgPSBjU3RyaW5nSU8uU3RyaW5nSU8oKQogICAgaWYgc3RkZXJyIGlzIE5vbmU6CiAgICAgICAgc3RkZXJyID0gY1N0cmluZ0lPLlN0cmluZ0lPKCkKICAgIHByb2Nlc3MgPSBOb25lCiAgICB0cnk6CiAgICAgICAgcHJvY2VzcyA9IHN1YnByb2Nlc3MuUG9wZW4oCiAgICAgICAgICAgIGNsaSwKICAgICAgICAgICAgZW52PWVudiwKICAgICAgICAgICAgc3RkaW49c3RkaW4sCiAgICAgICAgICAgIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUsCiAgICAgICAgICAgIHN0ZGVycj1zdWJwcm9jZXNzLlBJUEUpCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgaWYgcGlkID09IG9zcGlkIG9yIHBpZCBpcyBOb25lOgogICAgICAgICAgICAgICAgcGlkID0gcHJvY2Vzcy5waWQKICAgICAgICAgICAgaWYgdGltZW91dCBpcyBub3QgTm9uZSBhbmQgKHRpbWUudGltZSgpID49IG5vdyArIHRpbWVvdXQpOgogICAgICAgICAgICAgICAgdGVybWluYXRlKHByb2Nlc3MpCiAgICAgICAgICAgICAgICBlcnJvciA9ICgKICAgICAgICAgICAgICAgICAgICAnam9iIHRvbyBsb25nIHRvIGV4ZWN1dGUsIHByb2Nlc3Mgd2FzIGtpbGxlZFxuJwogICAgICAgICAgICAgICAgICAgICcgIHswfScKICAgICAgICAgICAgICAgICkuZm9ybWF0KGNsaSkKICAgICAgICAgICAgICAgIGZvcmNlX3JldGNvZGUgPSBUSU1FT1VUX1JFVENPREUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldGNvZGUgPSBwcm9jZXNzLnBvbGwoKQogICAgICAgICAgICAgICAgc3Rkb3V0X3Bvcywgc3RkZXJyX3Bvcywgc3Rkbywgc3RkZSA9IGRvX3Byb2Nlc3NfaW9zKAogICAgICAgICAgICAgICAgICAgIHByb2Nlc3MsIHZlcmJvc2U9dmVyYm9zZSwKICAgICAgICAgICAgICAgICAgICBzdGRvdXRfcG9zPXN0ZG91dF9wb3MsIHN0ZGVycl9wb3M9c3RkZXJyX3BvcywKICAgICAgICAgICAgICAgICAgICBzdGRvdXQ9c3Rkb3V0LCBzdGRlcnI9c3RkZXJyKQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDQpCiAgICAgICAgICAgIGlmIHJldGNvZGUgaXMgbm90IE5vbmUgb3IgZm9yY2VfcmV0Y29kZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIGJyZWFrCiAgICBleGNlcHQgKEtleWJvYXJkSW50ZXJydXB0LCBFeGNlcHRpb24pIGFzIGV4YzoKICAgICAgICB0cmFjZSA9IHRyYWNlYmFjay5mb3JtYXRfZXhjKCkKICAgICAgICBzeXMuc3RkZXJyLndyaXRlKHRyYWNlKQogICAgICAgIHRyeToKICAgICAgICAgICAgdGVybWluYXRlKHByb2Nlc3MpCiAgICAgICAgZXhjZXB0IFVuYm91bmRMb2NhbEVycm9yOgogICAgICAgICAgICBwYXNzCiAgICAgICAgcmFpc2UgZXhjCiAgICBmaW5hbGx5OgogICAgICAgIGlmIHByb2Nlc3MgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHN0ZG91dF9wb3MsIHN0ZGVycl9wb3MsIHN0ZG8sIHN0ZGUgPSBkb19wcm9jZXNzX2lvcygKICAgICAgICAgICAgICAgIHByb2Nlc3MsIHZlcmJvc2U9dmVyYm9zZSwKICAgICAgICAgICAgICAgIHN0ZG91dF9wb3M9c3Rkb3V0X3Bvcywgc3RkZXJyX3Bvcz1zdGRlcnJfcG9zLAogICAgICAgICAgICAgICAgc3Rkb3V0PXN0ZG91dCwgc3RkZXJyPXN0ZGVycikKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgdGVybWluYXRlKHByb2Nlc3MpCiAgICAgICAgICAgIGV4Y2VwdCBVbmJvdW5kTG9jYWxFcnJvcjoKICAgICAgICAgICAgICAgIHBhc3MKICAgIGlmIGZvcmNlX3JldGNvZGUgaXMgbm90IE5vbmU6CiAgICAgICAgcmV0Y29kZSA9IGZvcmNlX3JldGNvZGUKICAgIGlmIHJldGNvZGUgaXMgTm9uZToKICAgICAgICByZXRjb2RlID0gTk9fUkVUQ09ERQogICAgaWYgcmV0Y29kZSAhPSAwIGFuZCBub3QgZXJyb3I6CiAgICAgICAgZXJyb3IgPSAncHJvZ3JhbSBlcnJvciwgY2hlY2sgc3RkIHN0cmVhbXMnCiAgICByZXRjb2RlID0gZm9yY2VfcmV0Y29kZSBvciByZXRjb2RlCiAgICByZXQgPSB7J3JldGNvZGUnOiByZXRjb2RlLAogICAgICAgICAgICdzdGF0dXMnOiBOb25lLAogICAgICAgICAgICdlcnJvcic6IE5vbmUsCiAgICAgICAgICAgJ3BpZCc6IHBpZCwKICAgICAgICAgICAnY2xpJzogJyAnLmpvaW4oY2xpKSwKICAgICAgICAgICAnc3Rkb3V0Jzogc3Rkb3V0LmdldHZhbHVlKCksCiAgICAgICAgICAgJ3N0ZGVycic6IHN0ZGVyci5nZXR2YWx1ZSgpfQogICAgZmFpbGVkKHJldCwgZXJyb3I9ZXJyb3IpCiAgICBpZiB2ZXJib3NlOgogICAgICAgIHByaW50KGZvcm1hdF9vdXRwdXRfYW5kX2Vycm9yKHJldCkpCiAgICByZXR1cm4gcmV0CgoKZGVmIGNvbXBsZXhfanNvbl9vdXRwdXRfc2ltcGxlKHN0cmluZyk6CiAgICAnJycKICAgIEV4dHJhY3QganNvbiBvdXRwdXQgZnJvbSBzdGRvdXQgKHN0cmluZyBwYXJzZSB2YXJpYW50KQoKICAgIGlmIHN0YXRlcyBnYXJibGVkIHRoZSBzdGRvdXQsIGJ1dCB3ZSBzdGlsbCBoYXZlIGEgcmVzdWx0IGxpa2U6OgoKICAgICAgICAuLi5jb21tYW5kIGdhcmdhZ2Ugb3V0cHV0Li4uCiAgICAgICAgeyJsb2NhbCI6IHRydWV9CgogICAgd2Ugd2lsbCB0cnkgdG8gcmVtb3ZlIHRoZSBzdGFydGluZyBvdXRwdXQgYW5kIHNvIGV4dHJhY3QKICAgIHRoZSByZXN1bHQgZnJvbSB0aGUgb3V0cHV0CiAgICAnJycKICAgIGlmIG5vdCBpc2luc3RhbmNlKHN0cmluZywgc2l4LnN0cmluZ190eXBlcyk6CiAgICAgICAgcmV0dXJuIHN0cmluZwogICAgcmV0ID0gX21hcmtlcgogICAgZm9yIHBvcywgaSBpbiBlbnVtZXJhdGUoc3RyaW5nKToKICAgICAgICBpZiBpID09ICd7JzoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmV0ID0ganNvbi5sb2FkcyhzdHJpbmdbcG9zOl0pCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgICAgIHBhc3MKICAgIGlmIHJldCBpcyBfbWFya2VyOgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ0NhbnQgZXh0cmFjdCBqc29uIG91dHB1dCcpCiAgICByZXR1cm4gcmV0CgoKZGVmIGNvbXBsZXhfanNvbl9vdXRwdXRfbXVsdGlsaW5lcyhzdHJpbmcpOgogICAgJycnCiAgICBFeHRyYWN0IGpzb24gb3V0cHV0IGZyb20gc3Rkb3V0IChsaW5lcyBwYXJzZSB2YXJpYW50KQoKICAgIGlmIHN0YXRlcyBnYXJibGVkIHRoZSBzdGRvdXQsIGJ1dCB3ZSBzdGlsbCBoYXZlIGEgcmVzdWx0IGxpa2U6OgoKICAgICAgICAuLi5jb21tYW5kIGdhcmdhZ2Ugb3V0cHV0Li4uCiAgICAgICAgeyJsb2NhbCI6IHRydWV9CgogICAgd2Ugd2lsbCB0cnkgdG8gcmVtb3ZlIHRoZSBzdGFydGluZyBvdXRwdXQgYW5kIHNvIGV4dHJhY3QKICAgIHRoZSByZXN1bHQgZnJvbSB0aGUgb3V0cHV0CiAgICAnJycKICAgIGlmIG5vdCBpc2luc3RhbmNlKHN0cmluZywgc2l4LnN0cmluZ190eXBlcyk6CiAgICAgICAgcmV0dXJuIHN0cmluZwogICAgcmV0ID0gX21hcmtlcgogICAgbGluZXMgPSBzdHJpbmcuc3BsaXRsaW5lcygpCiAgICBmb3IgcG9zLCBsaW5lIGluIGVudW1lcmF0ZShsaW5lcyk6CiAgICAgICAgc2xpbmUgPSBtYWdpY3N0cmluZyhsaW5lLnN0cmlwKCkpCiAgICAgICAgaWYgc2xpbmUuc3RhcnRzd2l0aCgneycpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByZXQgPSBqc29uLmxvYWRzKCcnLmpvaW4oW21hZ2ljc3RyaW5nKGEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBhIGluIGxpbmVzW3BvczpdXSkpCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgICAgIHBhc3MKICAgIGlmIHJldCBpcyBfbWFya2VyOgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ0NhbnQgZXh0cmFjdCBqc29uIG91dHB1dCcpCiAgICByZXR1cm4gcmV0CgoKZGVmIGNhbGwoZnVuYywKICAgICAgICAgZXhlY3V0YWJsZT1Ob25lLAogICAgICAgICBhcmdzPU5vbmUsCiAgICAgICAgIGxvZ2xldmVsPU5vbmUsCiAgICAgICAgIGNvbmZpZ19kaXI9Tm9uZSwKICAgICAgICAgc3RkaW49Tm9uZSwKICAgICAgICAgc3Rkb3V0PU5vbmUsCiAgICAgICAgIHN0ZGVycj1Ob25lLAogICAgICAgICB0aW1lb3V0PU5vbmUsCiAgICAgICAgIG91dHB1dF9xdWV1ZT1Ob25lLAogICAgICAgICB2YWxpZGF0ZV9zdGF0ZXM9Tm9uZSwKICAgICAgICAgcmV0Y29kZV9wYXNzdGhyb3VnaD1Ob25lLAogICAgICAgICBub19yZXRjb2RlX3Bhc3N0aHJvdWdoPU5vbmUsCiAgICAgICAgIG5vX3F1b3RlPU5vbmUsCiAgICAgICAgIHNsZWVwX2ludGVydmFsPU5vbmUsCiAgICAgICAgIGxvY2FsPUZhbHNlLAogICAgICAgICBvdXQ9Tm9uZSwKICAgICAgICAgbm9fb3V0PU5PX1JFVFVSTiwKICAgICAgICAgbm9fZGlzcGxheV9yZXQ9Tm9uZSwKICAgICAgICAgcmV0X2Zvcm1hdD1Ob25lLAogICAgICAgICB2ZXJib3NlPU5vbmUsCiAgICAgICAgIGVudj1Ob25lKToKICAgIGlmIGFyZ3MgaXMgTm9uZToKICAgICAgICBhcmdzID0gW10KICAgIGlmIGlzaW5zdGFuY2UoYXJncywgc2l4LnN0cmluZ190eXBlcyk6CiAgICAgICAgYXJncyA9IHNobGV4LnNwbGl0KGFyZ3MpCiAgICBpZiBvdXQgaXMgTm9uZToKICAgICAgICBvdXQgPSAnanNvbicKICAgIGlmIHJldF9mb3JtYXQgaXMgTm9uZToKICAgICAgICByZXRfZm9ybWF0ID0gJ2pzb24nCiAgICBpZiB2ZXJib3NlIGlzIE5vbmU6CiAgICAgICAgdmVyYm9zZSA9IEZhbHNlCiAgICBpZiBub3QgZXhlY3V0YWJsZToKICAgICAgICBleGVjdXRhYmxlID0gJ3NhbHQtY2FsbCcKICAgIGlmIHJldGNvZGVfcGFzc3Rocm91Z2ggaXMgTm9uZToKICAgICAgICByZXRjb2RlX3Bhc3N0aHJvdWdoID0gVHJ1ZQogICAgaWYgbm9fcmV0Y29kZV9wYXNzdGhyb3VnaCBpcyBOb25lOgogICAgICAgIG5vX3JldGNvZGVfcGFzc3Rocm91Z2ggPSBGYWxzZQogICAgZWFyZ3MgPSBbXQogICAgaWYgbm9fcmV0Y29kZV9wYXNzdGhyb3VnaDoKICAgICAgICByZXRjb2RlX3Bhc3N0aHJvdWdoID0gRmFsc2UKICAgIGZvciB0ZXN0LCBhcmdwYXJ0IGluIFsKICAgICAgICAoVHJ1ZSwgW2V4ZWN1dGFibGVdKSwKICAgICAgICAobG9jYWwsIFsnLS1sb2NhbCddKSwKICAgICAgICAocmV0Y29kZV9wYXNzdGhyb3VnaCwgWyctLXJldGNvZGUtcGFzc3Rocm91Z2gnXSksCiAgICAgICAgKGNvbmZpZ19kaXIsIFsnLWMnLCBjb25maWdfZGlyXSksCiAgICAgICAgKGxvZ2xldmVsLCBbJy1sJywgbG9nbGV2ZWxdKSwKICAgICAgICAob3V0LCBbJy0tb3V0Jywgb3V0XSksCiAgICAgICAgKFRydWUsIFtmdW5jXSArIGFyZ3MpCiAgICBdOgogICAgICAgIGlmIHRlc3Q6CiAgICAgICAgICAgIGVhcmdzLmV4dGVuZChhcmdwYXJ0KQogICAgcmV0ID0gY21kKGFyZ3M9ZWFyZ3MsIGVudj1lbnYsIHRpbWVvdXQ9dGltZW91dCwKICAgICAgICAgICAgICB2ZXJib3NlPXZlcmJvc2UsCiAgICAgICAgICAgICAgbm9fcXVvdGU9bm9fcXVvdGUsIHNsZWVwX2ludGVydmFsPXNsZWVwX2ludGVydmFsLAogICAgICAgICAgICAgIHN0ZGluPXN0ZGluLCBzdGRlcnI9c3RkZXJyLCBzdGRvdXQ9c3Rkb3V0KQogICAgZGVjb2RlcnMgPSB7J2pzb24nOiBqc29uX2xvYWR9CiAgICBlbmNvZGVycyA9IHsnanNvbic6IChsYW1iZGEgeDoganNvbl9kdW1wKHgsIHByZXR0eT1UcnVlKSl9CiAgICByZXRbJ3NhbHRfZnVuJ10gPSBmdW5jCiAgICByZXRbJ3NhbHRfYXJncyddID0gYXJncwogICAgcmV0WydzYWx0X291dCddID0gTm9uZQogICAgaWYgb3V0IGFuZCBvdXQgaW4gZGVjb2RlcnMgYW5kIHJldC5nZXQoJ3N0ZG91dCcsICcnKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGRvdXQgPSBOb25lCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGRvdXQgPSBkZWNvZGVyc1tvdXRdKHJldFsnc3Rkb3V0J10pCiAgICAgICAgICAgIGV4Y2VwdCAoS2V5RXJyb3IsIFZhbHVlRXJyb3IpOgogICAgICAgICAgICAgICAgaWYgb3V0ID09ICdqc29uJzoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIGRvdXQgPSBjb21wbGV4X2pzb25fb3V0cHV0X211bHRpbGluZXMoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXRbJ3N0ZG91dCddKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCAoS2V5RXJyb3IsIFZhbHVlRXJyb3IpOgogICAgICAgICAgICAgICAgICAgICAgICBkb3V0ID0gY29tcGxleF9qc29uX291dHB1dF9zaW1wbGUoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXRbJ3N0ZG91dCddKQogICAgICAgICAgICAgICAgaWYgZG91dCBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoZG91dCwgZGljdCk6CiAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVfc3RhdGVzIGlzIG5vdCBGYWxzZSBhbmQKICAgICAgICAgICAgICAgICAgICBmdW5jIGluIFsnc3RhdGUuaGlnaHN0YXRlJywgJ3N0YXRlLnNscyddCiAgICAgICAgICAgICAgICApOgogICAgICAgICAgICAgICAgICAgIHNyYyA9IGRvX3ZhbGlkYXRlX3N0YXRlcyhkb3V0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXRjb2RlX3Bhc3N0aHJvdWdoPXJldGNvZGVfcGFzc3Rocm91Z2gsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldGNvZGU9cmV0WydyZXRjb2RlJ10pCiAgICAgICAgICAgICAgICAgICAgaWYgc3JjICE9IDAgYW5kIChyZXRbJ3JldGNvZGUnXSA9PSAwKToKICAgICAgICAgICAgICAgICAgICAgICAgcmV0WydyZXRjb2RlJ10gPSBzcmMKICAgICAgICAgICAgICAgIGlmIFthIGZvciBhIGluIGRvdXRdID09IFsnbG9jYWwnXToKICAgICAgICAgICAgICAgICAgICBkb3V0ID0gZG91dFsnbG9jYWwnXQogICAgICAgICAgICByZXRbJ3NhbHRfb3V0J10gPSBkb3V0CiAgICAgICAgZXhjZXB0IChLZXlFcnJvciwgVmFsdWVFcnJvcik6CiAgICAgICAgICAgICMgbm8ganNvbiBvdXRwdXQgaXMgZXF1aXZhbGVudCBhcyBhIGZhaWxlZCBjYWxsCiAgICAgICAgICAgIHJldFsncmV0Y29kZSddID0gTk9SRVRVUk5fUkVUQ09ERQogICAgICAgICAgICBpZiBub3QgcmV0WydlcnJvciddOgogICAgICAgICAgICAgICAgcmV0WydlcnJvciddID0gJycKICAgICAgICAgICAgcmV0WydlcnJvciddICs9ICdcbmZhaWxlZCB0byBkZWNvZGUgcGF5bG9hZCcKICAgIHRyeToKICAgICAgICByZXRjb2RlID0gaW50KHJldFsncmV0Y29kZSddKQogICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgcmV0Y29kZSA9IDY2NgogICAgcmV0WydyZXRjb2RlJ10gPSByZXRjb2RlCiAgICBpZiBvdXRwdXRfcXVldWU6CiAgICAgICAgb3V0cHV0X3F1ZXVlLnB1dChyZXQpCiAgICBwaWQgPSBvcy5nZXRwaWQoKQogICAgaWYgbm90IG5vX2Rpc3BsYXlfcmV0OgogICAgICAgIGVyZXQgPSByZXQKICAgICAgICBpZiByZXRfZm9ybWF0IGluIGVuY29kZXJzOgogICAgICAgICAgICBlcmV0ID0gZW5jb2RlcnNbcmV0X2Zvcm1hdF0oZXJldCkKICAgICAgICBwcmludCgiX19TQUxUQ0FMTEVSX1JFVFVSTl97MH0iLmZvcm1hdChwaWQpKQogICAgICAgIHByaW50KGVyZXQpCiAgICAgICAgcHJpbnQoIl9fU0FMVENBTExFUl9FTkRfUkVUVVJOX3swfSIuZm9ybWF0KHBpZCkpCiAgICByZXR1cm4gcmV0CgoKZGVmIG1haW4oKToKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKCkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJ2Z1bmMnLCBuYXJncz0xLAogICAgICAgICAgICAgICAgICAgICAgICBoZWxwPSdzYWx0IGZ1bmN0aW9uIHRvIGNhbGwnKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnYXJncycsCiAgICAgICAgICAgICAgICAgICAgICAgIG5hcmdzPWFyZ3BhcnNlLlJFTUFJTkRFUiwKICAgICAgICAgICAgICAgICAgICAgICAgaGVscD0oJ2Z1bmN0aW9uIGFyZ3VtZW50cyBhcyB5b3Ugd291bGQgdXNlJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIG9uIGNsaSB0byBjYWxsIHNhbHQtY2FsbCcpKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS12YWxpZGF0ZS1zdGF0ZXMnLAogICAgICAgICAgICAgICAgICAgICAgICBoZWxwPSgnZm9yIHN0YXRlcyBmdW5jdGlvbiAoc2xzLCBoaWdoc3RhdGUpLCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBleGlzdCB3aXRoIG5vbi0wIHN0YXR1cyBpbiBjYXNlIG9mIGVycm9ycycpLAogICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0PUZhbHNlLCBhY3Rpb249J3N0b3JlX3RydWUnKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1leGVjdXRhYmxlJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy1jJywgJy0tY29uZmlnLWRpcicpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctLXJldC1mb3JtYXQnKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1sb2NhbCcsCiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHA9J3VzZSAtLWxvY2FsIHdoZW4gY2FsbGluZyBzYWx0LWNhbGwnLAogICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb249J3N0b3JlX3RydWUnKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1yZXRjb2RlLXBhc3N0aHJvdWdoJywgZGVmYXVsdD1Ob25lLAogICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb249J3N0b3JlX3RydWUnKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1uby1yZXRjb2RlLXBhc3N0aHJvdWdoJywgZGVmYXVsdD1Ob25lLAogICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb249J3N0b3JlX3RydWUnKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1vdXQnLCBkZWZhdWx0PU5vbmUpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctbCcsICctLWxvZ2xldmVsJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tdGltZW91dCcsIGRlZmF1bHQ9Tm9uZSwgdHlwZT1pbnQpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctLW5vLXF1b3RlJywgYWN0aW9uPSdzdG9yZV90cnVlJywgZGVmYXVsdD1GYWxzZSkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy12JywgJy0tdmVyYm9zZScsIGFjdGlvbj0nc3RvcmVfdHJ1ZScsCiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHA9KCdpZiBzZXQsIGRpc3BsYXkgY29tbWFuZCBvdXRwdXQgb24gY29uc29sZScpLAogICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0PUZhbHNlKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1uby1kaXNwbGF5LXJldCcsCiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHA9KCdEbyBub3QgZGlzcGxheSB0aGUgZnVsbCByZXR1cm4nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgZnJvbSBwcm9jZXNzIGEgSlNPTiBtZXRhZGF0YXMnKSwKICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uPSdzdG9yZV90cnVlJywgZGVmYXVsdD1GYWxzZSkKICAgIGFyZ3MgPSBwYXJzZXIucGFyc2VfYXJncygpCiAgICB2b3B0cyA9IHZhcnMoYXJncykKICAgIHZvcHRzWydmdW5jJ10gPSB2b3B0c1snZnVuYyddWzBdCiAgICByZXR1cm4gY2FsbCgqKnZvcHRzKQoKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXycgYW5kIG5vdCBvcy5lbnZpcm9uLmdldCgnTk9fUFlFWEVDJyk6CiAgICBzeXMuZXhpdChtYWluKClbJ3JldGNvZGUnXSkKCg=="""


def main():
    changed = False
    executable = None
    for i in ['/srv/makina-states/bin/salt-call']:
        if os.path.exists(i):
            executable = i
            break
    msg = ''
    module = AnsibleModule(
        argument_spec=dict(
            loglevel=dict(required=False, default=None, type='str'),
            function=dict(required=True, default=None, type='str'),
            executable=dict(required=False, default=executable, type='str'),
            local=dict(required=False, default=None, type='bool'),
            args=dict(required=False, default=None, type='str'),
            verbose=dict(required=False, default=False, type='bool'),
            timeout=dict(required=False, default=None, type='int'),
            config_dir=dict(required=False, default=None, type='str'),
        )
    )
    if sys.version < '3':
        sc = SALTCALLER.decode('base64')
    else:
        import base64
        sc = base64.b64decode(SALTCALLER).decode()
    mod = {}
    if sys.hexversion > 0x03000000:
        exec(compile(sc, '<saltcaller_mod>', 'exec'), mod)
    else:
        exec(compile(sc, '<saltcaller_mod>', 'exec')) in mod
    verbose = module.params.get('verbose')
    function = module.params.get('function')
    fkwargs = {'no_display_ret': True,
               'loglevel': module.params.get('loglevel'),
               'timeout': module.params.get('timeout'),
               'local': module.params.get('local'),
               'executable': module.params.get('executable'),
               'config_dir': module.params.get('config_dir'),
               'args': module.params.get('args')}
    for i in [a for a in fkwargs]:
        if fkwargs[i] is None:
            fkwargs.pop(i, None)
    ret = mod['call'](function, **fkwargs)
    if ret.get('salt_out', None) and not verbose:
        ret['stdout'] = '<TRIMMED>'
        if ret['retcode'] == 0:
            ret['stderr'] = '<TRIMMED>'
    if ret['retcode'] == 0:
        module.exit_json(changed=changed, msg=ret)
    else:
        module.fail_json(msg={'msg': 'saltcallerror', 'result': ret})


if __name__ == '__main__':
    main()
# vim:set et sts=4 ts=4 tw=80:
