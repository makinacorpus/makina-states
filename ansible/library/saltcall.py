#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import os
import json
from ansible.module_utils.basic import *

DOCUMENTATION = '''
---
module: saltcall
version_added: "0.1"
short_description: wrapper to makina-states salt-call 'saltcaller' script
description:
    - call salt-call
    - thie module can use two modes of execution either by
      using the embedded (and maybe stale) saltcaller script
      or by using the original script on the filesystem if
      present and found.
options:
    function: exec module/fun to call
    args: positional/name args (salt cli formated)

TO maintainers:
    - do not edit saltcall.py but saltcall.py.in
    - run hacking/gen_ansible_saltcaller.py to
      refresh the SALTCALLER SLOT from saltcall.py.in
      and regerenerate saltcall.py
'''

EXAMPLES = '''
- action: saltcall \
        function=state.sls args='["makina-states.cloud.generic.dnsconf"]'
'''

# generated via hacking/gen_ansible_saltcaller.py
# this embeds the saltcaller script inside the ansible module
# but not in plain text as ansible would quote it
SALTCALLER = """
Cgpmcm9tIF9fZnV0dXJlX18gaW1wb3J0IGFic29sdXRlX2ltcG9ydApmcm9tIF9fZnV0dXJlX18gaW1wb3J0IGRpdmlzaW9uCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgcHJpbnRfZnVuY3Rpb24KJycnCgouLiBfbWNfc3RhdGVzX3NhbHRjYWxsZXI6Cgp3cmFwcGVycyB0byBzYWx0IHNoZWxsIGNvbW1hbmRzCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKVGhpcyBpcyBub3QgaW5jbHVkZWQgaW4gYSBzYWx0IG1vZHVsZSBhbmQgaXNvbGF0ZWQgdG8gYmUKcGlja2xhYmxlIGFuZCB1c2VkIHRob3JvdWdoIHB5dGhvbiBtdWx0aXByb2Nlc3NpbmcgYXMgYSB0YXJnZXQKCgpUaGUgbW9kdWxlIGhhcyByZWR1bmRhbnQgZnVuY3Rpb25zIHdpdGggdGhlIG1ha2luYS1zdGF0ZXMgY29kZWJhc2UgYnV0IHRoZSBnb2FsIGlzIHRoYXQgaXQgaXMgc2VsZmNvbnRhaW5lZCBhbmQgZGVwZW5kZW5jeSBsZXNzLgoKJycnCgppbXBvcnQgc2hsZXgKaW1wb3J0IGFyZ3BhcnNlCmltcG9ydCBjb3B5Cgp0cnk6CiAgICBpbXBvcnQgY1N0cmluZ0lPCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIGltcG9ydCBpbyBhcyBjU3RyaW5nSU8KaW1wb3J0IG9zCmltcG9ydCBwaXBlcwppbXBvcnQgc3VicHJvY2VzcwppbXBvcnQgc3lzCmltcG9ydCBzaXgKaW1wb3J0IHRpbWUKaW1wb3J0IHRyYWNlYmFjawppbXBvcnQgbG9nZ2luZwppbXBvcnQgZmNudGwKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBqc29uCgoKdHJ5OgogICAgaW1wb3J0IGNoYXJkZXQKICAgIEhBU19DSEFSREVUID0gVHJ1ZQpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBIQVNfQ0hBUkRFVCA9IEZhbHNlCgoKX21hcmtlciA9IG9iamVjdCgpCk5PX1JFVFVSTiA9ICdfX0NBTExFUl9OT19SRVRVUk5fXycKTk9SRVRVUk5fUkVUQ09ERSA9IDUKTk9EQVRBX1JFVENPREUgPSA2Ck5PRElDVF9SRVRDT0RFID0gNwpOT19JTk5FUl9ESUNUX1JFVENPREUgPSA4ClNUQVRFX1JFVF9JU19OT1RfQV9ESUNUX1JFVENPREUgPSAxMQpTVEFURV9GQUlMRURfUkVUQ09ERSA9IDkKVElNRU9VVF9SRVRDT0RFID0gLTY2NgpOT19SRVRDT0RFID0gLTY2OApsb2cgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCgpkZWYganNvbl9sb2FkKGRhdGEpOgogICAgY29udGVudCA9IGRhdGEucmVwbGFjZSgnIC0tLUFOVExJU0xBU0hfTi0tLSAnLCAnXG4nKQogICAgY29udGVudCA9IGpzb24ubG9hZHMoY29udGVudCkKICAgIHJldHVybiBjb250ZW50CgoKZGVmIGpzb25fZHVtcChkYXRhLCBwcmV0dHk9RmFsc2UpOgogICAgaWYgcHJldHR5OgogICAgICAgIGNvbnRlbnQgPSBqc29uLmR1bXBzKAogICAgICAgICAgICBkYXRhLCBpbmRlbnQ9NCwgc2VwYXJhdG9ycz0oJywnLCAnOiAnKSkKICAgIGVsc2U6CiAgICAgICAgY29udGVudCA9IGpzb24uZHVtcHMoZGF0YSkKICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKCdcbicsICcgLS0tQU5UTElTTEFTSF9OLS0tICcpCiAgICByZXR1cm4gY29udGVudAoKCmRlZiBtYWdpY3N0cmluZyh0aGVzdHIpOgogICAgJycnCiAgICBDb252ZXJ0IGFueSBzdHJpbmcgdG8gVVRGLTggRU5DT0RFRCBvbmUKICAgICcnJwogICAgaWYgc3lzLnZlcnNpb25bMF0gPj0gJzMnOgogICAgICAgIHJldHVybiB0aGVzdHIKICAgIGlmIG5vdCBIQVNfQ0hBUkRFVDoKICAgICAgICByZXR1cm4gdGhlc3RyCiAgICBzZWVrID0gRmFsc2UKICAgIGlmICgKICAgICAgICBpc2luc3RhbmNlKHRoZXN0ciwgKGludCwgZmxvYXQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRldGltZS5kYXRlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZXRpbWUudGltZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGV0aW1lLmRhdGV0aW1lKSkKICAgICk6CiAgICAgICAgdGhlc3RyID0gInswfSIuZm9ybWF0KHRoZXN0cikKICAgIGlmIGlzaW5zdGFuY2UodGhlc3RyLCBzaXgudGV4dF90eXBlKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRoZXN0ciA9IHRoZXN0ci5lbmNvZGUoJ3V0Zi04JykKICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICBzZWVrID0gVHJ1ZQogICAgaWYgc2VlazoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGRldGVjdGVkZW5jID0gY2hhcmRldC5kZXRlY3QodGhlc3RyKS5nZXQoJ2VuY29kaW5nJykKICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICBkZXRlY3RlZGVuYyA9IE5vbmUKICAgICAgICBpZiBkZXRlY3RlZGVuYzoKICAgICAgICAgICAgc2RldGVjdGVkZW5jID0gZGV0ZWN0ZWRlbmMubG93ZXIoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNkZXRlY3RlZGVuYyA9ICcnCiAgICAgICAgaWYgc2RldGVjdGVkZW5jLnN0YXJ0c3dpdGgoJ2lzby04ODU5Jyk6CiAgICAgICAgICAgIGRldGVjdGVkZW5jID0gJ0lTTy04ODU5LTE1JwoKICAgICAgICBmb3VuZF9lbmNvZGluZ3MgPSBbCiAgICAgICAgICAgICdJU08tODg1OS0xNScsICdUSVMtNjIwJywgJ0VVQy1LUicsCiAgICAgICAgICAgICdFVUMtSlAnLCAnU0hJRlRfSklTJywgJ0dCMjMxMicsICd1dGYtOCcsICdhc2NpaScsCiAgICAgICAgXQogICAgICAgIGlmIHNkZXRlY3RlZGVuYyBub3QgaW4gKCd1dGYtOCcsICdhc2NpaScpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZSh0aGVzdHIsIHNpeC50ZXh0X3R5cGUpOgogICAgICAgICAgICAgICAgICAgIHRoZXN0ciA9IHRoZXN0ci5kZWNvZGUoZGV0ZWN0ZWRlbmMpCiAgICAgICAgICAgICAgICB0aGVzdHIgPSB0aGVzdHIuZW5jb2RlKGRldGVjdGVkZW5jKQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICAgICAgZm9yIGlkeCwgaSBpbiBlbnVtZXJhdGUoZm91bmRfZW5jb2RpbmdzKToKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKHRoZXN0ciwgc2l4LnRleHRfdHlwZSkgYW5kIGRldGVjdGVkZW5jOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlc3RyID0gdGhlc3RyLmRlY29kZShkZXRlY3RlZGVuYykKICAgICAgICAgICAgICAgICAgICAgICAgdGhlc3RyID0gdGhlc3RyLmVuY29kZShpKQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlkeCA9PSAobGVuKGZvdW5kX2VuY29kaW5ncykgLSAxKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICBpZiBpc2luc3RhbmNlKHRoZXN0ciwgc2l4LnRleHRfdHlwZSk6CiAgICAgICAgdGhlc3RyID0gdGhlc3RyLmVuY29kZSgndXRmLTgnKQogICAgdGhlc3RyID0gdGhlc3RyLmRlY29kZSgndXRmLTgnKS5lbmNvZGUoJ3V0Zi04JykKICAgIHJldHVybiB0aGVzdHIKCgpkZWYgdGVybWluYXRlKHByb2Nlc3MpOgogICAgZm9yIGkgaW4gWyd0ZXJtaW5hdGUnLCAna2lsbCddOgogICAgICAgIHRyeToKICAgICAgICAgICAgZ2V0YXR0cihwcm9jZXNzLCBpKSgpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgcGFzcwoKCmRlZiBkb192YWxpZGF0ZV9zdGF0ZXMoZGF0YSwgcmV0Y29kZV9wYXNzdGhyb3VnaD1Ob25lLCByZXRjb2RlPU5vbmUpOgogICAgaWYgbm90IGRhdGE6CiAgICAgICAgcmV0dXJuIE5PREFUQV9SRVRDT0RFCiAgICBpZiBub3QgaXNpbnN0YW5jZShkYXRhLCBkaWN0KToKICAgICAgICByZXR1cm4gTk9ESUNUX1JFVENPREUKICAgIHRyeToKICAgICAgICAjIGlmIHdlIHNldCByY19wYXNzdGhyb3VnaChkZWZhdWx0KQogICAgICAgICMgYW5kIHdlIGdvdCBhIHdlbGwga25vd24gcmV0dXJuIGNvZGUsIHRoZW4gdXNlIGl0CiAgICAgICAgcmMgPSBpbnQocmV0Y29kZSkKICAgICAgICBhc3NlcnQgcmMgaW4gWzAsIDJdIGFuZCByZXRjb2RlX3Bhc3N0aHJvdWdoCiAgICAgICAgcmV0dXJuIHJjCiAgICBleGNlcHQgQXNzZXJ0aW9uRXJyb3I6CiAgICAgICAgcGFzcwogICAgIyBlbHNlIHRyeSB0byBnZXQgb3Vyc2VsdmVzIGlmIGV2ZXJ5dGhpbmcgZGlkIGdvbmUgd2VsbAogICAgZm9yIGksIHJkYXRhIGluIGRhdGEuaXRlbXMoKToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShyZGF0YSwgZGljdCk6CiAgICAgICAgICAgIHJldHVybiBOT19JTk5FUl9ESUNUX1JFVENPREUKICAgICAgICBmb3Igaiwgc3RhdGVkYXRhIGluIHJkYXRhLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKHN0YXRlZGF0YSwgZGljdCk6CiAgICAgICAgICAgICAgICByZXR1cm4gU1RBVEVfUkVUX0lTX05PVF9BX0RJQ1RfUkVUQ09ERQogICAgICAgICAgICBlbGlmIHN0YXRlZGF0YS5nZXQoJ3Jlc3VsdCcsIE5vbmUpIGlzIEZhbHNlOgogICAgICAgICAgICAgICAgaWYgbm90IHJldGNvZGVfcGFzc3Rocm91Z2g6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRF9SRVRDT0RFCiAgICByZXR1cm4gMAoKCmRlZiBmYWlsZWQocmV0LCBlcnJvcj1Ob25lKToKICAgIHJldFsnc3RhdHVzJ10gPSByZXRbJ3JldGNvZGUnXSA9PSAwCiAgICBpZiBlcnJvciBpcyBub3QgTm9uZSBhbmQgbm90IHJldFsnc3RhdHVzJ106CiAgICAgICAgcmV0WydlcnJvciddID0gZXJyb3IKICAgIGlmIHJldFsnZXJyb3InXToKICAgICAgICByZXRbJ2Vycm9yJ10gPSBtYWdpY3N0cmluZyhyZXRbJ2Vycm9yJ10pCiAgICByZXR1cm4gcmV0CgoKZGVmIG5vbl9ibG9ja19yZWFkKG91dHB1dCk6CiAgICB0cnk6CiAgICAgICAgZmQgPSBvdXRwdXQuZmlsZW5vKCkKICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgIHJldHVybiAiIgogICAgZWxzZToKICAgICAgICBmbCA9IGZjbnRsLmZjbnRsKGZkLCBmY250bC5GX0dFVEZMKQogICAgICAgIGZjbnRsLmZjbnRsKGZkLCBmY250bC5GX1NFVEZMLCBmbCB8IG9zLk9fTk9OQkxPQ0spCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gb3V0cHV0LnJlYWQoKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHJldHVybiAiIgoKCmRlZiBkb19wcm9jZXNzX2lvcyhwcm9jZXNzLAogICAgICAgICAgICAgICAgICAgdmVyYm9zZT1GYWxzZSwKICAgICAgICAgICAgICAgICAgIG91dHB1dF9vdXQ9c3lzLnN0ZG91dCwKICAgICAgICAgICAgICAgICAgIG91dHB1dF9lcnI9c3lzLnN0ZGVyciwKICAgICAgICAgICAgICAgICAgIHN0ZG91dF9wb3M9Tm9uZSwKICAgICAgICAgICAgICAgICAgIHN0ZGVycl9wb3M9Tm9uZSwKICAgICAgICAgICAgICAgICAgIHN0ZG91dD1Ob25lLAogICAgICAgICAgICAgICAgICAgc3RkZXJyPU5vbmUpOgogICAgaWYgc3Rkb3V0IGlzIE5vbmU6CiAgICAgICAgc3Rkb3V0ID0gY1N0cmluZ0lPLlN0cmluZ0lPKCkKICAgIGlmIHN0ZGVyciBpcyBOb25lOgogICAgICAgIHN0ZGVyciA9IGNTdHJpbmdJTy5TdHJpbmdJTygpCiAgICBzdHJlYW1zID0geydvdXQnOiBzdGRvdXRfcG9zLCAnZXJyJzogc3RkZXJyX3Bvc30KICAgIHN0ZG8gPSBub25fYmxvY2tfcmVhZChwcm9jZXNzLnN0ZG91dCkKICAgIHN0ZGUgPSBub25fYmxvY2tfcmVhZChwcm9jZXNzLnN0ZGVycikKICAgIGlmIHN0ZG86CiAgICAgICAgc3Rkb3V0LndyaXRlKHN0ZG8uZGVjb2RlKCkpCiAgICBpZiBzdGRlOgogICAgICAgIHN0ZGVyci53cml0ZShzdGRlLmRlY29kZSgpKQogICAgZm9yIGssIHZhbCwgb3V0IGluICgKICAgICAgICAoJ291dCcsIHN0ZG91dC5nZXR2YWx1ZSgpLCBvdXRwdXRfb3V0KSwKICAgICAgICAoJ2VycicsIHN0ZGVyci5nZXR2YWx1ZSgpLCBvdXRwdXRfZXJyKSwKICAgICk6CiAgICAgICAgaWYgbm90IHZhbDoKICAgICAgICAgICAgY29udGludWUKICAgICAgICBwb3MgPSBzdHJlYW1zW2tdCiAgICAgICAgbnBvcyA9IGxlbih2YWwpIC0gMQogICAgICAgIGlmIHZhbCBhbmQgKChwb3MgPT0gMCkgb3IgKG5wb3MgIT0gcG9zKSk6CiAgICAgICAgICAgIGlmIHZlcmJvc2U6CiAgICAgICAgICAgICAgICBvdXQud3JpdGUodmFsW3BvczpdKQogICAgICAgIHN0cmVhbXNba10gPSBucG9zCiAgICByZXR1cm4gc3RyZWFtc1snb3V0J10sIHN0cmVhbXNbJ2VyciddLCBzdGRvLCBzdGRlCgoKZGVmIGZvcm1hdF9lcnJvcihyZXQpOgogICAgJycnCiAgICBUbyBhdm9pZCBsYXJnZSBtZW1vcnkgdXNhZ2UsIG9ubHkgbGF6eSBmb3JtYXQgZXJyb3JzIG9uIGRlbWFuZAogICAgJycnCiAgICByZXR1cm4gKCcnCiAgICAgICAgICAgICdfX1NBTFRDQUxMRVJfRVJST1Jfe3BpZH1cbicKICAgICAgICAgICAgJ3tlcnJvcn1cbicKICAgICAgICAgICAgJ19fU0FMVENBTExFUl9FTkRfRVJST1Jfe3BpZH1cbicKICAgICAgICAgICAgJycpLmZvcm1hdCgqKnJldCkKCgpkZWYgZm9ybWF0X291dHB1dChyZXQpOgogICAgJycnCiAgICBUbyBhdm9pZCBsYXJnZSBtZW1vcnkgdXNhZ2UsIG9ubHkgbGF6eSBmb3JtYXQgZXJyb3JzIG9uIGRlbWFuZAogICAgJycnCiAgICByZXR1cm4gKCcnCiAgICAgICAgICAgICdfX1NBTFRDQUxMRVJfU1RERVJSX3twaWR9XG4nCiAgICAgICAgICAgICd7c3RkZXJyfVxuJwogICAgICAgICAgICAnX19TQUxUQ0FMTEVSX0VORF9TVERFUlJfe3BpZH1cbicKICAgICAgICAgICAgJ19fU0FMVENBTExFUl9TVERPVVRfe3BpZH1cbicKICAgICAgICAgICAgJ3tzdGRvdXR9XG4nCiAgICAgICAgICAgICdfX1NBTFRDQUxMRVJfRU5EX1NURE9VVF97cGlkfVxuJwogICAgICAgICAgICAnJykuZm9ybWF0KCoqcmV0KQoKCmRlZiBmb3JtYXRfb3V0cHV0X2FuZF9lcnJvcihyZXQpOgogICAgJycnCiAgICBUbyBhdm9pZCBsYXJnZSBtZW1vcnkgdXNhZ2UsIG9ubHkgbGF6eSBmb3JtYXQgZXJyb3JzIG9uIGRlbWFuZAogICAgJycnCiAgICByZXR1cm4gZm9ybWF0X2Vycm9yKHJldCkgKyBmb3JtYXRfb3V0cHV0KHJldCkKCgpkZWYgY21kKGFyZ3MsCiAgICAgICAgdGltZW91dD1Ob25lLAogICAgICAgIHN0ZGluPU5vbmUsCiAgICAgICAgc3Rkb3V0PU5vbmUsCiAgICAgICAgc2xlZXBfaW50ZXJ2YWw9Tm9uZSwKICAgICAgICBzdGRlcnI9Tm9uZSwKICAgICAgICBub19xdW90ZT1Ob25lLAogICAgICAgIHZlcmJvc2U9Tm9uZSwKICAgICAgICBlbnY9Tm9uZSk6CiAgICBpZiBub3Qgc2xlZXBfaW50ZXJ2YWw6CiAgICAgICAgc2xlZXBfaW50ZXJ2YWwgPSAwLjA0CiAgICBpZiBub19xdW90ZSBpcyBOb25lOgogICAgICAgIG5vX3F1b3RlID0gRmFsc2UKICAgIGlmIG5vdCBlbnY6CiAgICAgICAgZW52ID0ge30KICAgIGVudmlyb24gPSBjb3B5LmRlZXBjb3B5KG9zLmVudmlyb24pCiAgICBlbnZpcm9uLnVwZGF0ZShjb3B5LmRlZXBjb3B5KGVudikpCiAgICBub3cgPSB0aW1lLnRpbWUoKQogICAgY2xpID0gW21hZ2ljc3RyaW5nKGEpIGZvciBhIGluIGFyZ3NdCiAgICBvc3BpZCA9IHBpZCA9IG9zLmdldHBpZCgpCiAgICBpZiBub3Qgbm9fcXVvdGU6CiAgICAgICAgY2xpID0gW3BpcGVzLnF1b3RlKGEpIGZvciBhIGluIGNsaV0KICAgIHJldGNvZGUsIGZvcmNlX3JldGNvZGUgPSBOb25lLCBOb25lCiAgICBzdGRvdXRfcG9zLCBzdGRlcnJfcG9zID0gTm9uZSwgTm9uZQogICAgZXJyb3IgPSBOb25lCiAgICBpZiBzdGRvdXQgaXMgTm9uZToKICAgICAgICBzdGRvdXQgPSBjU3RyaW5nSU8uU3RyaW5nSU8oKQogICAgaWYgc3RkZXJyIGlzIE5vbmU6CiAgICAgICAgc3RkZXJyID0gY1N0cmluZ0lPLlN0cmluZ0lPKCkKICAgIHByb2Nlc3MgPSBOb25lCiAgICB0cnk6CiAgICAgICAgcHJvY2VzcyA9IHN1YnByb2Nlc3MuUG9wZW4oCiAgICAgICAgICAgIGNsaSwKICAgICAgICAgICAgZW52PWVudiwKICAgICAgICAgICAgc3RkaW49c3RkaW4sCiAgICAgICAgICAgIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUsCiAgICAgICAgICAgIHN0ZGVycj1zdWJwcm9jZXNzLlBJUEUpCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgaWYgcGlkID09IG9zcGlkIG9yIHBpZCBpcyBOb25lOgogICAgICAgICAgICAgICAgcGlkID0gcHJvY2Vzcy5waWQKICAgICAgICAgICAgaWYgdGltZW91dCBpcyBub3QgTm9uZSBhbmQgKHRpbWUudGltZSgpID49IG5vdyArIHRpbWVvdXQpOgogICAgICAgICAgICAgICAgdGVybWluYXRlKHByb2Nlc3MpCiAgICAgICAgICAgICAgICBlcnJvciA9ICgKICAgICAgICAgICAgICAgICAgICAnam9iIHRvbyBsb25nIHRvIGV4ZWN1dGUsIHByb2Nlc3Mgd2FzIGtpbGxlZFxuJwogICAgICAgICAgICAgICAgICAgICcgIHswfScKICAgICAgICAgICAgICAgICkuZm9ybWF0KGNsaSkKICAgICAgICAgICAgICAgIGZvcmNlX3JldGNvZGUgPSBUSU1FT1VUX1JFVENPREUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldGNvZGUgPSBwcm9jZXNzLnBvbGwoKQogICAgICAgICAgICAgICAgc3Rkb3V0X3Bvcywgc3RkZXJyX3Bvcywgc3Rkbywgc3RkZSA9IGRvX3Byb2Nlc3NfaW9zKAogICAgICAgICAgICAgICAgICAgIHByb2Nlc3MsIHZlcmJvc2U9dmVyYm9zZSwKICAgICAgICAgICAgICAgICAgICBzdGRvdXRfcG9zPXN0ZG91dF9wb3MsIHN0ZGVycl9wb3M9c3RkZXJyX3BvcywKICAgICAgICAgICAgICAgICAgICBzdGRvdXQ9c3Rkb3V0LCBzdGRlcnI9c3RkZXJyKQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDQpCiAgICAgICAgICAgIGlmIHJldGNvZGUgaXMgbm90IE5vbmUgb3IgZm9yY2VfcmV0Y29kZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIGJyZWFrCiAgICBleGNlcHQgKEtleWJvYXJkSW50ZXJydXB0LCBFeGNlcHRpb24pIGFzIGV4YzoKICAgICAgICB0cmFjZSA9IHRyYWNlYmFjay5mb3JtYXRfZXhjKCkKICAgICAgICBwcmludCh0cmFjZSkKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRlcm1pbmF0ZShwcm9jZXNzKQogICAgICAgIGV4Y2VwdCBVbmJvdW5kTG9jYWxFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIHJhaXNlIGV4YwogICAgZmluYWxseToKICAgICAgICBpZiBwcm9jZXNzIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzdGRvdXRfcG9zLCBzdGRlcnJfcG9zLCBzdGRvLCBzdGRlID0gZG9fcHJvY2Vzc19pb3MoCiAgICAgICAgICAgICAgICBwcm9jZXNzLCB2ZXJib3NlPXZlcmJvc2UsCiAgICAgICAgICAgICAgICBzdGRvdXRfcG9zPXN0ZG91dF9wb3MsIHN0ZGVycl9wb3M9c3RkZXJyX3BvcywKICAgICAgICAgICAgICAgIHN0ZG91dD1zdGRvdXQsIHN0ZGVycj1zdGRlcnIpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHRlcm1pbmF0ZShwcm9jZXNzKQogICAgICAgICAgICBleGNlcHQgVW5ib3VuZExvY2FsRXJyb3I6CiAgICAgICAgICAgICAgICBwYXNzCiAgICBpZiBmb3JjZV9yZXRjb2RlIGlzIG5vdCBOb25lOgogICAgICAgIHJldGNvZGUgPSBmb3JjZV9yZXRjb2RlCiAgICBpZiByZXRjb2RlIGlzIE5vbmU6CiAgICAgICAgcmV0Y29kZSA9IE5PX1JFVENPREUKICAgIGlmIHJldGNvZGUgIT0gMCBhbmQgbm90IGVycm9yOgogICAgICAgIGVycm9yID0gJ3Byb2dyYW0gZXJyb3IsIGNoZWNrIHN0ZCBzdHJlYW1zJwogICAgcmV0Y29kZSA9IGZvcmNlX3JldGNvZGUgb3IgcmV0Y29kZQogICAgcmV0ID0geydyZXRjb2RlJzogcmV0Y29kZSwKICAgICAgICAgICAnc3RhdHVzJzogTm9uZSwKICAgICAgICAgICAnZXJyb3InOiBOb25lLAogICAgICAgICAgICdwaWQnOiBwaWQsCiAgICAgICAgICAgJ2NsaSc6ICcgJy5qb2luKGNsaSksCiAgICAgICAgICAgJ3N0ZG91dCc6IHN0ZG91dC5nZXR2YWx1ZSgpLAogICAgICAgICAgICdzdGRlcnInOiBzdGRlcnIuZ2V0dmFsdWUoKX0KICAgIGZhaWxlZChyZXQsIGVycm9yPWVycm9yKQogICAgaWYgdmVyYm9zZToKICAgICAgICBwcmludChmb3JtYXRfb3V0cHV0X2FuZF9lcnJvcihyZXQpKQogICAgcmV0dXJuIHJldAoKCmRlZiBjb21wbGV4X2pzb25fb3V0cHV0X3NpbXBsZShzdHJpbmcpOgogICAgJycnCiAgICBFeHRyYWN0IGpzb24gb3V0cHV0IGZyb20gc3Rkb3V0IChzdHJpbmcgcGFyc2UgdmFyaWFudCkKCiAgICBpZiBzdGF0ZXMgZ2FyYmxlZCB0aGUgc3Rkb3V0LCBidXQgd2Ugc3RpbGwgaGF2ZSBhIHJlc3VsdCBsaWtlOjoKCiAgICAgICAgLi4uY29tbWFuZCBnYXJnYWdlIG91dHB1dC4uLgogICAgICAgIHsibG9jYWwiOiB0cnVlfQoKICAgIHdlIHdpbGwgdHJ5IHRvIHJlbW92ZSB0aGUgc3RhcnRpbmcgb3V0cHV0IGFuZCBzbyBleHRyYWN0CiAgICB0aGUgcmVzdWx0IGZyb20gdGhlIG91dHB1dAogICAgJycnCiAgICBpZiBub3QgaXNpbnN0YW5jZShzdHJpbmcsIHNpeC5zdHJpbmdfdHlwZXMpOgogICAgICAgIHJldHVybiBzdHJpbmcKICAgIHJldCA9IF9tYXJrZXIKICAgIGZvciBwb3MsIGkgaW4gZW51bWVyYXRlKHN0cmluZyk6CiAgICAgICAgaWYgaSA9PSAneyc6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHJldCA9IGpzb24ubG9hZHMoc3RyaW5nW3BvczpdKQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgICAgICBwYXNzCiAgICBpZiByZXQgaXMgX21hcmtlcjoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdDYW50IGV4dHJhY3QganNvbiBvdXRwdXQnKQogICAgcmV0dXJuIHJldAoKCmRlZiBjb21wbGV4X2pzb25fb3V0cHV0X211bHRpbGluZXMoc3RyaW5nKToKICAgICcnJwogICAgRXh0cmFjdCBqc29uIG91dHB1dCBmcm9tIHN0ZG91dCAobGluZXMgcGFyc2UgdmFyaWFudCkKCiAgICBpZiBzdGF0ZXMgZ2FyYmxlZCB0aGUgc3Rkb3V0LCBidXQgd2Ugc3RpbGwgaGF2ZSBhIHJlc3VsdCBsaWtlOjoKCiAgICAgICAgLi4uY29tbWFuZCBnYXJnYWdlIG91dHB1dC4uLgogICAgICAgIHsibG9jYWwiOiB0cnVlfQoKICAgIHdlIHdpbGwgdHJ5IHRvIHJlbW92ZSB0aGUgc3RhcnRpbmcgb3V0cHV0IGFuZCBzbyBleHRyYWN0CiAgICB0aGUgcmVzdWx0IGZyb20gdGhlIG91dHB1dAogICAgJycnCiAgICBpZiBub3QgaXNpbnN0YW5jZShzdHJpbmcsIHNpeC5zdHJpbmdfdHlwZXMpOgogICAgICAgIHJldHVybiBzdHJpbmcKICAgIHJldCA9IF9tYXJrZXIKICAgIGxpbmVzID0gc3RyaW5nLnNwbGl0bGluZXMoKQogICAgZm9yIHBvcywgbGluZSBpbiBlbnVtZXJhdGUobGluZXMpOgogICAgICAgIHNsaW5lID0gbWFnaWNzdHJpbmcobGluZS5zdHJpcCgpKQogICAgICAgIGlmIHNsaW5lLnN0YXJ0c3dpdGgoJ3snKToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmV0ID0ganNvbi5sb2FkcygnJy5qb2luKFttYWdpY3N0cmluZyhhKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgYSBpbiBsaW5lc1twb3M6XV0pKQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgICAgICBwYXNzCiAgICBpZiByZXQgaXMgX21hcmtlcjoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdDYW50IGV4dHJhY3QganNvbiBvdXRwdXQnKQogICAgcmV0dXJuIHJldAoKCmRlZiBjYWxsKGZ1bmMsCiAgICAgICAgIGV4ZWN1dGFibGU9Tm9uZSwKICAgICAgICAgYXJncz1Ob25lLAogICAgICAgICBsb2dsZXZlbD1Ob25lLAogICAgICAgICBjb25maWdfZGlyPU5vbmUsCiAgICAgICAgIHN0ZGluPU5vbmUsCiAgICAgICAgIHN0ZG91dD1Ob25lLAogICAgICAgICBzdGRlcnI9Tm9uZSwKICAgICAgICAgdGltZW91dD1Ob25lLAogICAgICAgICBvdXRwdXRfcXVldWU9Tm9uZSwKICAgICAgICAgdmFsaWRhdGVfc3RhdGVzPU5vbmUsCiAgICAgICAgIHJldGNvZGVfcGFzc3Rocm91Z2g9Tm9uZSwKICAgICAgICAgbm9fcmV0Y29kZV9wYXNzdGhyb3VnaD1Ob25lLAogICAgICAgICBub19xdW90ZT1Ob25lLAogICAgICAgICBzbGVlcF9pbnRlcnZhbD1Ob25lLAogICAgICAgICBsb2NhbD1GYWxzZSwKICAgICAgICAgb3V0PU5vbmUsCiAgICAgICAgIG5vX291dD1OT19SRVRVUk4sCiAgICAgICAgIG5vX2Rpc3BsYXlfcmV0PU5vbmUsCiAgICAgICAgIHJldF9mb3JtYXQ9Tm9uZSwKICAgICAgICAgdmVyYm9zZT1Ob25lLAogICAgICAgICBlbnY9Tm9uZSk6CiAgICBpZiBhcmdzIGlzIE5vbmU6CiAgICAgICAgYXJncyA9IFtdCiAgICBpZiBpc2luc3RhbmNlKGFyZ3MsIHNpeC5zdHJpbmdfdHlwZXMpOgogICAgICAgIGFyZ3MgPSBzaGxleC5zcGxpdChhcmdzKQogICAgaWYgb3V0IGlzIE5vbmU6CiAgICAgICAgb3V0ID0gJ2pzb24nCiAgICBpZiByZXRfZm9ybWF0IGlzIE5vbmU6CiAgICAgICAgcmV0X2Zvcm1hdCA9ICdqc29uJwogICAgaWYgdmVyYm9zZSBpcyBOb25lOgogICAgICAgIHZlcmJvc2UgPSBGYWxzZQogICAgaWYgbm90IGV4ZWN1dGFibGU6CiAgICAgICAgZXhlY3V0YWJsZSA9ICdzYWx0LWNhbGwnCiAgICBpZiByZXRjb2RlX3Bhc3N0aHJvdWdoIGlzIE5vbmU6CiAgICAgICAgcmV0Y29kZV9wYXNzdGhyb3VnaCA9IFRydWUKICAgIGlmIG5vX3JldGNvZGVfcGFzc3Rocm91Z2ggaXMgTm9uZToKICAgICAgICBub19yZXRjb2RlX3Bhc3N0aHJvdWdoID0gRmFsc2UKICAgIGVhcmdzID0gW10KICAgIGlmIG5vX3JldGNvZGVfcGFzc3Rocm91Z2g6CiAgICAgICAgcmV0Y29kZV9wYXNzdGhyb3VnaCA9IEZhbHNlCiAgICBmb3IgdGVzdCwgYXJncGFydCBpbiBbCiAgICAgICAgKFRydWUsIFtleGVjdXRhYmxlXSksCiAgICAgICAgKGxvY2FsLCBbJy0tbG9jYWwnXSksCiAgICAgICAgKHJldGNvZGVfcGFzc3Rocm91Z2gsIFsnLS1yZXRjb2RlLXBhc3N0aHJvdWdoJ10pLAogICAgICAgIChjb25maWdfZGlyLCBbJy1jJywgY29uZmlnX2Rpcl0pLAogICAgICAgIChsb2dsZXZlbCwgWyctbCcsIGxvZ2xldmVsXSksCiAgICAgICAgKG91dCwgWyctLW91dCcsIG91dF0pLAogICAgICAgIChUcnVlLCBbZnVuY10gKyBhcmdzKQogICAgXToKICAgICAgICBpZiB0ZXN0OgogICAgICAgICAgICBlYXJncy5leHRlbmQoYXJncGFydCkKICAgIHJldCA9IGNtZChhcmdzPWVhcmdzLCBlbnY9ZW52LCB0aW1lb3V0PXRpbWVvdXQsCiAgICAgICAgICAgICAgdmVyYm9zZT12ZXJib3NlLAogICAgICAgICAgICAgIG5vX3F1b3RlPW5vX3F1b3RlLCBzbGVlcF9pbnRlcnZhbD1zbGVlcF9pbnRlcnZhbCwKICAgICAgICAgICAgICBzdGRpbj1zdGRpbiwgc3RkZXJyPXN0ZGVyciwgc3Rkb3V0PXN0ZG91dCkKICAgIGRlY29kZXJzID0geydqc29uJzoganNvbl9sb2FkfQogICAgZW5jb2RlcnMgPSB7J2pzb24nOiAobGFtYmRhIHg6IGpzb25fZHVtcCh4LCBwcmV0dHk9VHJ1ZSkpfQogICAgcmV0WydzYWx0X2Z1biddID0gZnVuYwogICAgcmV0WydzYWx0X2FyZ3MnXSA9IGFyZ3MKICAgIHJldFsnc2FsdF9vdXQnXSA9IE5vbmUKICAgIGlmIG91dCBhbmQgb3V0IGluIGRlY29kZXJzIGFuZCByZXQuZ2V0KCdzdGRvdXQnLCAnJyk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBkb3V0ID0gTm9uZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBkb3V0ID0gZGVjb2RlcnNbb3V0XShyZXRbJ3N0ZG91dCddKQogICAgICAgICAgICBleGNlcHQgKEtleUVycm9yLCBWYWx1ZUVycm9yKToKICAgICAgICAgICAgICAgIGlmIG91dCA9PSAnanNvbic6CiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICBkb3V0ID0gY29tcGxleF9qc29uX291dHB1dF9tdWx0aWxpbmVzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0WydzdGRvdXQnXSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQgKEtleUVycm9yLCBWYWx1ZUVycm9yKToKICAgICAgICAgICAgICAgICAgICAgICAgZG91dCA9IGNvbXBsZXhfanNvbl9vdXRwdXRfc2ltcGxlKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0WydzdGRvdXQnXSkKICAgICAgICAgICAgICAgIGlmIGRvdXQgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGRvdXQsIGRpY3QpOgogICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlX3N0YXRlcyBpcyBub3QgRmFsc2UgYW5kCiAgICAgICAgICAgICAgICAgICAgZnVuYyBpbiBbJ3N0YXRlLmhpZ2hzdGF0ZScsICdzdGF0ZS5zbHMnXQogICAgICAgICAgICAgICAgKToKICAgICAgICAgICAgICAgICAgICBzcmMgPSBkb192YWxpZGF0ZV9zdGF0ZXMoZG91dCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0Y29kZV9wYXNzdGhyb3VnaD1yZXRjb2RlX3Bhc3N0aHJvdWdoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXRjb2RlPXJldFsncmV0Y29kZSddKQogICAgICAgICAgICAgICAgICAgIGlmIHNyYyAhPSAwIGFuZCAocmV0WydyZXRjb2RlJ10gPT0gMCk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldFsncmV0Y29kZSddID0gc3JjCiAgICAgICAgICAgICAgICBpZiBbYSBmb3IgYSBpbiBkb3V0XSA9PSBbJ2xvY2FsJ106CiAgICAgICAgICAgICAgICAgICAgZG91dCA9IGRvdXRbJ2xvY2FsJ10KICAgICAgICAgICAgcmV0WydzYWx0X291dCddID0gZG91dAogICAgICAgIGV4Y2VwdCAoS2V5RXJyb3IsIFZhbHVlRXJyb3IpOgogICAgICAgICAgICAjIG5vIGpzb24gb3V0cHV0IGlzIGVxdWl2YWxlbnQgYXMgYSBmYWlsZWQgY2FsbAogICAgICAgICAgICByZXRbJ3JldGNvZGUnXSA9IE5PUkVUVVJOX1JFVENPREUKICAgICAgICAgICAgaWYgbm90IHJldFsnZXJyb3InXToKICAgICAgICAgICAgICAgIHJldFsnZXJyb3InXSA9ICcnCiAgICAgICAgICAgIHJldFsnZXJyb3InXSArPSAnXG5mYWlsZWQgdG8gZGVjb2RlIHBheWxvYWQnCiAgICB0cnk6CiAgICAgICAgcmV0Y29kZSA9IGludChyZXRbJ3JldGNvZGUnXSkKICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgIHJldGNvZGUgPSA2NjYKICAgIHJldFsncmV0Y29kZSddID0gcmV0Y29kZQogICAgaWYgb3V0cHV0X3F1ZXVlOgogICAgICAgIG91dHB1dF9xdWV1ZS5wdXQocmV0KQogICAgcGlkID0gb3MuZ2V0cGlkKCkKICAgIGlmIG5vdCBub19kaXNwbGF5X3JldDoKICAgICAgICBlcmV0ID0gcmV0CiAgICAgICAgaWYgcmV0X2Zvcm1hdCBpbiBlbmNvZGVyczoKICAgICAgICAgICAgZXJldCA9IGVuY29kZXJzW3JldF9mb3JtYXRdKGVyZXQpCiAgICAgICAgcHJpbnQoIl9fU0FMVENBTExFUl9SRVRVUk5fezB9Ii5mb3JtYXQocGlkKSkKICAgICAgICBwcmludChlcmV0KQogICAgICAgIHByaW50KCJfX1NBTFRDQUxMRVJfRU5EX1JFVFVSTl97MH0iLmZvcm1hdChwaWQpKQogICAgcmV0dXJuIHJldAoKCmRlZiBtYWluKCk6CiAgICBwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcigpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCdmdW5jJywgbmFyZ3M9MSwKICAgICAgICAgICAgICAgICAgICAgICAgaGVscD0nc2FsdCBmdW5jdGlvbiB0byBjYWxsJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJ2FyZ3MnLAogICAgICAgICAgICAgICAgICAgICAgICBuYXJncz1hcmdwYXJzZS5SRU1BSU5ERVIsCiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHA9KCdmdW5jdGlvbiBhcmd1bWVudHMgYXMgeW91IHdvdWxkIHVzZScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBvbiBjbGkgdG8gY2FsbCBzYWx0LWNhbGwnKSkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tdmFsaWRhdGUtc3RhdGVzJywKICAgICAgICAgICAgICAgICAgICAgICAgaGVscD0oJ2ZvciBzdGF0ZXMgZnVuY3Rpb24gKHNscywgaGlnaHN0YXRlKSwnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgZXhpc3Qgd2l0aCBub24tMCBzdGF0dXMgaW4gY2FzZSBvZiBlcnJvcnMnKSwKICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdD1GYWxzZSwgYWN0aW9uPSdzdG9yZV90cnVlJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tZXhlY3V0YWJsZScpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctYycsICctLWNvbmZpZy1kaXInKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1yZXQtZm9ybWF0JykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tbG9jYWwnLAogICAgICAgICAgICAgICAgICAgICAgICBoZWxwPSd1c2UgLS1sb2NhbCB3aGVuIGNhbGxpbmcgc2FsdC1jYWxsJywKICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uPSdzdG9yZV90cnVlJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tcmV0Y29kZS1wYXNzdGhyb3VnaCcsIGRlZmF1bHQ9Tm9uZSwKICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uPSdzdG9yZV90cnVlJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tbm8tcmV0Y29kZS1wYXNzdGhyb3VnaCcsIGRlZmF1bHQ9Tm9uZSwKICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uPSdzdG9yZV90cnVlJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tb3V0JywgZGVmYXVsdD1Ob25lKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLWwnLCAnLS1sb2dsZXZlbCcpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctLXRpbWVvdXQnLCBkZWZhdWx0PU5vbmUsIHR5cGU9aW50KQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1uby1xdW90ZScsIGFjdGlvbj0nc3RvcmVfdHJ1ZScsIGRlZmF1bHQ9RmFsc2UpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctdicsICctLXZlcmJvc2UnLCBhY3Rpb249J3N0b3JlX3RydWUnLAogICAgICAgICAgICAgICAgICAgICAgICBoZWxwPSgnaWYgc2V0LCBkaXNwbGF5IGNvbW1hbmQgb3V0cHV0IG9uIGNvbnNvbGUnKSwKICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdD1GYWxzZSkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tbm8tZGlzcGxheS1yZXQnLAogICAgICAgICAgICAgICAgICAgICAgICBoZWxwPSgnRG8gbm90IGRpc3BsYXkgdGhlIGZ1bGwgcmV0dXJuJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIGZyb20gcHJvY2VzcyBhIEpTT04gbWV0YWRhdGFzJyksCiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbj0nc3RvcmVfdHJ1ZScsIGRlZmF1bHQ9RmFsc2UpCiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQogICAgdm9wdHMgPSB2YXJzKGFyZ3MpCiAgICB2b3B0c1snZnVuYyddID0gdm9wdHNbJ2Z1bmMnXVswXQogICAgcmV0dXJuIGNhbGwoKip2b3B0cykKCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nIGFuZCBub3Qgb3MuZW52aXJvbi5nZXQoJ05PX1BZRVhFQycpOgogICAgc3lzLmV4aXQobWFpbigpWydyZXRjb2RlJ10pCgo="""


def main():
    changed = False
    executable = None
    for i in ['/srv/makina-states/bin/salt-call']:
        if os.path.exists(i):
            executable = i
            break
    msg = ''
    module = AnsibleModule(
        argument_spec=dict(
            loglevel=dict(required=False, default=None, type='str'),
            function=dict(required=True, default=None, type='str'),
            executable=dict(required=False, default=executable, type='str'),
            local=dict(required=False, default=None, type='bool'),
            args=dict(required=False, default=None, type='str'),
            verbose=dict(required=False, default=False, type='bool'),
            timeout=dict(required=False, default=None, type='int'),
            config_dir=dict(required=False, default=None, type='str'),
        )
    )
    if sys.version < '3':
        sc = SALTCALLER.decode('base64')
    else:
        import base64
        sc = base64.b64decode(SALTCALLER).decode()
    mod = {}
    if sys.hexversion > 0x03000000:
        exec(compile(sc, '<saltcaller_mod>', 'exec'), mod)
    else:
        exec(compile(sc, '<saltcaller_mod>', 'exec')) in mod
    verbose = module.params.get('verbose')
    function = module.params.get('function')
    fkwargs = {'no_display_ret': True,
               'loglevel': module.params.get('loglevel'),
               'timeout': module.params.get('timeout'),
               'local': module.params.get('local'),
               'executable': module.params.get('executable'),
               'config_dir': module.params.get('config_dir'),
               'args': module.params.get('args')}
    for i in [a for a in fkwargs]:
        if fkwargs[i] is None:
            fkwargs.pop(i, None)
    ret = mod['call'](function, **fkwargs)
    if ret.get('salt_out', None) and not verbose:
        ret['stdout'] = '<TRIMMED>'
        if ret['retcode'] == 0:
            ret['stderr'] = '<TRIMMED>'
    if ret['retcode'] == 0:
        module.exit_json(changed=changed, msg=ret)
    else:
        module.fail_json(msg={'msg': 'saltcallerror', 'result': ret})


if __name__ == '__main__':
    main()
# vim:set et sts=4 ts=4 tw=80:
