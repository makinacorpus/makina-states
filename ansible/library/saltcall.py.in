#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import os
import json
from ansible.module_utils.basic import *

DOCUMENTATION = '''
---
module: saltcall
version_added: "0.1"
short_description: wrapper to makina-states salt-call 'saltcaller' script
description:
    - call salt-call
    - thie module can use two modes of execution either by
      using the embedded (and maybe stale) saltcaller script
      or by using the original script on the filesystem if
      present and found.
options:
    function: exec module/fun to call
    args: positional/name args (salt cli formated)

TO maintainers:
    - do not edit saltcall.py but saltcall.py.in
    - run hacking/gen_ansible_saltcaller.py to
      refresh the SALTCALLER SLOT from saltcall.py.in
      and regerenerate saltcall.py
'''

EXAMPLES = '''
- action: saltcall \
        function=state.sls args='["makina-states.cloud.generic.dnsconf"]'
'''

# generated via hacking/gen_ansible_saltcaller.py
# this embeds the saltcaller script inside the ansible module
# but not in plain text as ansible would quote it
SALTCALLER = """"""


def main():
    changed = False
    executable = None
    for i in ['/srv/makina-states/bin/salt-call']:
        if os.path.exists(i):
            executable = i
            break
    msg = ''
    module = AnsibleModule(
        argument_spec=dict(
            loglevel=dict(required=False, default=None, type='str'),
            function=dict(required=True, default=None, type='str'),
            executable=dict(required=False, default=executable, type='str'),
            local=dict(required=False, default=None, type='bool'),
            args=dict(required=False, default=None, type='str'),
            verbose=dict(required=False, default=False, type='bool'),
            timeout=dict(required=False, default=None, type='int'),
            config_dir=dict(required=False, default=None, type='str'),
        )
    )
    if sys.version < '3':
        sc = SALTCALLER.decode('base64')
    else:
        import base64
        sc = base64.b64decode(SALTCALLER).decode()
    mod = {}
    if sys.hexversion > 0x03000000:
        exec(compile(sc, '<saltcaller_mod>', 'exec'), mod)
    else:
        exec(compile(sc, '<saltcaller_mod>', 'exec')) in mod
    verbose = module.params.get('verbose')
    function = module.params.get('function')
    fkwargs = {'no_display_ret': True,
               'loglevel': module.params.get('loglevel'),
               'timeout': module.params.get('timeout'),
               'local': module.params.get('local'),
               'executable': module.params.get('executable'),
               'config_dir': module.params.get('config_dir'),
               'args': module.params.get('args')}
    for i in [a for a in fkwargs]:
        if fkwargs[i] is None:
            fkwargs.pop(i, None)
    ret = mod['call'](function, **fkwargs)
    if ret.get('salt_out', None) and not verbose:
        ret['stdout'] = '<TRIMMED>'
        if ret['retcode'] == 0:
            ret['stderr'] = '<TRIMMED>'
    if ret['retcode'] == 0:
        module.exit_json(changed=changed, msg=ret)
    else:
        module.fail_json(msg={'msg': 'saltcallerror', 'result': ret})


if __name__ == '__main__':
    main()
# vim:set et sts=4 ts=4 tw=80:
