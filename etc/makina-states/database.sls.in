# MASTERSALT DATABASE

# format version
format: 1

# This file is consumed by mc_pillar
# This is an arbitrary, consise but still human readable document oriented database
# to describe your infrastructure from end to end

# In the longterm, this file will be autogenerated by the corpus system.

# This file does not do much at first but has a lot of examples to let you understand
# how to use mc_pillar to manage your infrastructure

# This configuration structure would answer to the IAAS
# layer of a cloud service.

# Each commented out section can be uncommented and adapted to your needs

# LDAP NSS/PAM configuration for machines connected to your infrastructure
# ldap_configurations:
#   default:
#     ldap_uri: "ldap://ldap.mydomain.tld/"
#     ldap_base: "dc=mydomain,dc=org"
#     ldap_passwd: "ou=People,dc=mydomain,dc=org?sub"
#     ldap_shadow: "ou=People,dc=mydomain,dc=org?sub"
#     ldap_group: "ou=Group,dc=mydomain,dc=org?sub"
#     ldap_cacert: "/etc/ssl/cacert.pem"
#     enabled: True
#     nslcd:
#       ssl: "start_tls"

# override default settings gathered by mc_network, if the host matching FQDN
# has the 'manage_network' flag set to true
# network_settings:
#   foo.bar.net:
#     br0: {gateway: 192.168.1.1}

# Configure slapd masters or slaves
# ldap_maps:
#   default:
#     cert_domain: ldap.foo.net
#     dn: 'dc=xxx'
#     root_dn: 'cn=admin,dc=xxx'
#     root_pw: 'xxx'
#     config_pw: 'xxx'
#   masters:
#   #  a.foo.net:
#   #    syncrepl:
#   #      binddn: "cn=replicator,ou=Virtual,ou=people,dc=xxx"
#   #      credentials: "xxx"
#   slaves:
#     default:
#       syncrepl:
#         binddn: "cn=replicator,ou=Virtual,ou=people,dc=xxx"
#         credentials: "xxx"
#         provider: "ldap://prod-fusiondirectory.foo.net:1389"
#     c.foo.net:
#       syncrepl:
#         provider: "ldap://prod-fusiondirectory.foo.net:389"
#     d.foo.net: {}
#     a.foo.net: {}
#     b.foo.net: {}
#     c.foo.net: {}
#
# Configuration of hosts based on toggle switches to activate or not
# an mc_pillar function
# Activating an extpillar does not mean that it will totally enable a feature
# but disabling it will totally remove any exposed information of the function
# key values informations
#   - backup_mode: backup method for this host
#   - backup_mode: backup mode to use, only avalaible for now is 'burp', see burp_configurations
#   - cloud_master: switch to configure this host as a cloud master
#   - default_env: prod
#   - domain: mydomain.tld
#   - ldap_client: does this host needs to wire it's PAM & NSS to a ldap server
#   - manage_autoupgrades: switch to activate postupgrade
#   - manage_backup_server: switch to activate configuration for selected backup servers
#   - manage_backups: switch to enable backups on that box
#   - manage_check_raid: switch to install raid checks (only on baremetal)
#   - manage_custompillar: switch to activate custom pillar loading
#   - manage_dhcp: switch to activate dhcp server configuration
#   - manage_dns_resolvers: switch to activate dns resolution configuration
#   - manage_dns_server: switch to activate dns servers configuration
#   - manage_fail2ban: switch to activate and configure fail2ban
#   - manage_hosts: switch to configure /etc/hosts
#   - manage_mails: switch to enable mail client/server on that box
#   - manage_network: switch to manage network interfaces
#   - manage_ntp_server: manage a ntp server on that box
#   - manage_packages: switch to configure the package manager
#   - manage_passwords: switch to configure passwords for root,
#   - manage_shorewall: switch to activate and configure shorewall
#   - manage_firewalld: switch to activate and configure firewalld
#   - manage_slapd: switch to activate slapd servers configuration
#   - manage_snmpd: switch to configure snmpd (v3), see snmpd_settings
#   - manage_ssh_groups: switch to configure ssh allowed groups
#   - manage_ssh_ip_restrictions: false
#   - manage_ssh_ip_restrictions: if on, restrict ssh access to ips in default_allowed_ips_names
#   - manage_ssh_keys: switch to configure ssh keys for configured users
#                      sysadmin and other configured system users
#   - manage_ssh_server: switch to activate ssh server servers configuration
#   - manage_ssl: switch to activate ssl certs exposure
#   - manage_sudoers: switch to configure sudoers
#   - mastersalt:  configure the mastersalt Minion id/real FQDN
#   - mastersaltdn: configure the mastersalt uri
#   - mastersalt_master: switch to configure this host as a mastersalt master
#   - mastersalt_port: configure the mastersalt port
#   - supervision_client:  does this host needs to install supervision client tools
#   - cloud_control_kvm: signals that this cluster master will be abl to orchetrate kvms vms
#   - cloud_control_lxc: signals that this cluster master will be abl to orchetrate lxc vms
#   - cloud_master: signals that this host is a cluster master
#   - cloud_master: signals that this host is a mastersalt master (singleton)
#    manage_exposed_glocal_conf: expose global conf flags via pillar
configurations:
  default: {}
    # you may use here a DNS targetting a failover ip (default to real master name)
    #mastersaltdn: mastersalt.makina-corpus.net
  mymaster.foo.net:
    mastersalt_master: true
    cloud_master: true
    #custom_pillar:
    #  makina-states.localsettings.provider:
    #    gandi:
    #      default:
    #        api_key: "xxx"
    #        activated: true
    #    ovh:
    #      default:
    #        login: "cgxxx-ovh"
    #        activated: true
    #        password: "xxx"
    #        application_name: "mc_makinastates2"
    #        application_description: "mc_makinastates2"
    #        application_key: "axxx"
    #        application_secret: "xxx
    #        consumer_key: "xxx"
{% macro nopillar() %}
    manage_backups: true
    manage_packages: true
    manage_shorewall: true
    manage_autoupgrades: true
    supervision_client: true
    cloud_control_kvm: false
    cloud_control_lxc: false
    cloud_master: false
    manage_exposed_glocal_conf: false
    ldap_client: false
    manage_firewalld: false
    manage_backup_server: false
    manage_check_raid: false
    manage_custompillar: false
    manage_dhcp: false
    manage_dns_resolvers: false
    manage_dns_server: false
    manage_fail2ban: false
    manage_hosts: false
    manage_mails: false
    manage_network: false
    manage_ntp_server: false
    manage_passwords: false
    manage_slapd: false
    manage_snmpd: false
    manage_ssh_groups: false
    manage_ssh_ip_restrictions: false
    manage_ssh_keys: false
    manage_ssh_server: false
    manage_ssl: false
    manage_sudoers: false
    mastersalt_master: false
{% endmacro %}
  msr-lxc-ref-precise.foo.net:
    {{nopillar()}}

#  provider3-99.mydomain.tld:
#    manage_network: false
#    manage_ntp_server: true
#  provider2-1.mydomain.tld:
#    backup_mode: burp-server
#  provider1-dc1-1.mydomain.tld:
#    mastersalt_master: true
#    cloud_master: true

# List of bare metal hosts presents in your infrastructure
# Each host present on this list will be given DNS (A) records
# which will be retrievied inside:
#   - ips_map
#   - ipsfo_map
#   - ips
#
# baremetal_hosts:
#   - provider3-1.mydomain.tld
#   - provider3-4.mydomain.tld

# vms indexed by VT technology and hosts
#   - Each vm will be given some A records which are:
#       - the ip found in ipfos_map if any
#       - the ip found in ips if any
#       - the baremetal IP by default if no ips tied
#         to the vm
#vms:
#  xen:
#    provider1-dc2-1.mydomain.tld:
#      - prod-app7.mydomain.tld
#  kvm:
#    provider22-3.mydomain.tld:
#      - prod-app6.mydomain.tld
#  lxc:
#    provider1-dc1-7.mydomain.tld:
#      - dev-app4.mydomain.tld
#      - vdm-tmp.mydomain.tld
#      - prod-app5.mydomain.tld
#    provider1-dc1-1.mydomain.tld:
#      - dev-superapp8.mydomain.tld
#      - msr-lxc-ref.mydomain.tld
#      - msr-lxc-ref-trusty.mydomain.tld
#      - msr-lxc-ref-vivid.mydomain.tld
#      - msr-lxc-ref-xenial.mydomain.tld

#
# cloud global settings
# override any default ext pillar settings in modules/mc_cloud_x.py
#
# cloud_settings:
#   cloud:
#     master: xxx.makina-corpus.net
#   controller: {}
#   compute_node: {}
#   kvm: {}
#   lxc: {}
#   saltify: {}
#   images:
#     lxc:
#       images:
#         makina-states-trusty:
#           builder_ref: xxx.makina-corpus.net

# Specific vms attributes to set inside makina-states's cloud configuration
# domains is one of the attributes you would easily set.
# cloud_vm_attrs:
#   prod-app7.mydomain.tld:
#     domains: [app2-developpement.com, app2.mydomain.tld]
#   provider1-dc1-1.mydomain.tld:
#     domains: [api.app1.mydomain.tld, ui.app1.mydomain.tld]
#     profile:
#       clone_from: superapp

# cloud compute node properties
# cloud_cn_attrs:
#   hostfoo-1-1.makina-corpus.net:
#     kvm:
#       defaults:
#         pools:
#           - {name: lxc, type: lvm}
#     lxc:
#       defaults:
#         backing: dir
#     haproxy:
#       raw_opts_pre:
#         - acl host_dev-foo.makina-corpus.net  hdr(host) -i dev-foo.makina-corpus.net
#       raw_opts_post:
#         - use_backend bck_dev-foo.makina-corpus.net if host_dev-foo.makina-corpus.net

# hosts to provision via mastersalt, but not hosting vms
# standalone_hosts:
#   provider2-1.mydomain.tld: {}


# not forcely non managed at all
# but at least really non completly managed by masersalt
# non_managed_hosts:
#   - preprod-django.mydomain.tld
#   - provider3-5.mydomain.tld

#
# Hosts and system user/password mappings
# - By default in makina-states, root login is only allowed via ssh key
# - The sysadmin account can login via password and is sudoers
# - All those members can connect to the box(See the ssh related structures)
#   - group members: ssh-users
#   - user: sysadmin
#   - user: root
# - This is non mandatory to input a password for root, they will be autogenerated
# - Sysadmin password is by default the same as root
# - The root password, if not given will be automaticly generated
#   and can be retrieved via the mc_pillar api, but you won't and rely on ssh keys.
#
# passwords_map:
#   provider2-1.mydomain.tld:
#     user1: aaa
#     root: xxx
#     sysadmin: zzz

# Default ssh restrictions
# Only those sources will be able to connect to any machine
# default_allowed_ips_names:
#   provider2-1.mydomain.tld:
#     - c.mydomain.tld
#   default:
#     - b.my-domain.com

# list of sysadmins: key is the trigramme and value is a list of
# ssh public keys for the sysadmins which can then connect
# as root
#keys_map:
#  infra:
#    - 'ssh-dss AAAAccccc='
#    - 'ssh-dss AAAABeeeevJ'
#  aaa:
#    - 'ssh-dss AAAAccccc='
#    - 'ssh-dss AAAABeeeevJ'
#  bbb:
#    - 'ssh-dss AAAAccccc='
#    - 'ssh-dss AAAABeeeevJ'

# Default snmpdv3 settings to set on a box
#snmpd_settings:
#  default:
#    user: "superuser"
#    password: "supersecret"
#    key: "shakey"

# FQDN indexed map of keys to disallow on a specific tenant (vm or host)
#removed_keys_map:
#  default: [foo]

#sysadmins_keys_map:
#  default: [infra, bbb, aaa]

# List of default groups which have login granted on machines
ssh_groups:
  default: [admin, root, sshusers, sudo, sysadmin, wheel]
#  provider2-1.mydomain.tld: [makina, user1]
#  provider3-99.mydomain.tld: [makina, ubuntu, others]

# Users to declare as Sudoers on a specific box
#sudoers_map:
#  default: [aaa, bbb]
#  provider1-dc1-2.mydomain.tld: [user4, user5]
#  prod-superproject.mydomain.tld: [user3]


# Mail configurations mappings tied to the postfix makina-states integration
# The default configuration used an must-be-authenticated based relay
# with no local delivery
# "{id}" is resolved to the current tenant
# "{dest}" is resolved to the current tenant domain
# mail_configurations:
#   default:
#     default_dest: "sysadmin+{id}@my-domain.com"
#     mode: relay
#     auth: true
#     smtp_auth:
#       mail.my-domain.com:
#         user: "foo@my-domain.com"
#         password: s3cret
#     transports:
#       '*': mail.my-domain.com
#     virtual_map:
#       - "/root@.*/": "{dest}"
#       - "/postmaster@.*/": "{dest}"
#       - "/abuse@.*/": "{dest}"
#       - "/.*@{id}/": "{dest}"
#       - "/.*@localhost/": "{dest}"
#       - "/.*@.local/": "{dest}"

# Free txt notes to be exposed later in corpus
# notes:
#   provider3-99.mydomain.tld: |
#                              blah blah

# /etc/hosts specific entries to add in the form {ip: '', host: ''}
# ip defaults to localhost
# hosts:
#   provider1-dc1-2.mydomain.tld:
#     - hosts: a.foo.com
#     - hosts: b.foo.com

# ms_iptables configuration
#ms_iptables_overrides:
#  foo.bar.net:
#    config:
#      policy: hard
#      rules:
#        - "iptables -w -t filter -A INPUT -m tcp --dport 880 -j ACCEPT"
#        {% for r in salt['mc_ms_iptables.add_ports']('881', protocols=['tcp']) %}
#        - {{r}}
#        {% endfor %}
#        {% for r in salt['mc_ms_iptables.add_nat']('881', to_addr='1.2.4.3', protocols=['tcp']) %}
#        - {{r}}
#        {% endfor %}
#        - "iptables -w -t filter -A INPUT -m tcp --dport 880 -j ACCEPT"

# Configuration overrides for makina-states's firewalld integration
# We install firewalld everywhere by default.
# firewalld_overrides:
#   a.foo.net:
#     zones.public.services-append: [dns]
#     zones.public.interfaces-append: [xm1]
#     zones.public.add-rules:
#       - "rule family="ipv4" forward-port port="476" protocol="tcp" to-port="22" to-addr="10.7.0.29"

# Mapping of FQDN -> ip failover
# - This will add an A record whith FQDN as owner and IP as target
# - Look at the ipfos_map section for further informations
# ipsfo:
#   ifo-provider2-1.mydomain.tld: 123.129.3.23
#   ifo-provider2-2.mydomain.tld: 123.129.3.24

# List of FQDN/IPS tied to your infra
# - Each record will be given at least an A dnsrecord per tied ip.
# - If this record is a baremetal host, the ip will be the one
#   of it's first ethernet card.
# ips:
#   www2.mydomain.com: [154.65.11.155]
#   www1.mydomain.com: [154.65.11.154]

# Mappings of a FQDN with an IP Failover
#   - If mapped is an host, the ip will be mounted
#     as an alias of the first ethernet card
#   - If mapped is tied to an lxc host or another vm,
#     the ip will be mounted on the host as an alias
#     of the first ethernet card
#   - if mapped is tied to a kvm host, it will
#     be mounted as the first ethernet card of the kvm vm.
#   - an A record is added with FQDN as owner and IPFO IP as target in all cases
# ipsfo_map:
#   # add only a dns record
#   my-domain.fr: [ifo-provider1-8.mydomain.tld]
#   # at it will match a BAREMETAL record, this will be also a aliased ip of this host
#   provider1-dc1-1.mydomain.tld: [ifo-provider2-1.mydomain.tld]
#   # at it will match a VM record, this will be also a aliased ip of this host
#   dev-app4.mydomain.tld: [ifo-provider2-12.mydomain.tld]

# CNAMES to declare in a zone file
# ATTENTION, you will certainly need the ending "." in the target !
# PLEASE USE CNAMES ONLY UNDER TORTURE
# cnames:
#   AABBCC.www.mydomain.com: AABBCC.comodoca.com.


# nameservers in /etc/resolv.conf (default: 127.0.0.1 8.8.8.8 4.4.4.4
# dns_resolvers:
#   default.bar.net: ["8.8.8.8"] (opt, can be unset)
#   foo.bar.net: ["4.4.4.4"]

# search domains in /etc/resolv.conf
# dns_search:
#   default: ["autoconfig.loc"] (opt, can be unset)
#   foo.bar.net: ["autoconfig.loc"]

# SPECIFIC A RECORD ALIAS INSTEAD OF CNAMES
# Please use CNAMES only under torture, ips_map is your savior here.
# CNAMES are nowodays misused but heavily abused.
# Idea is here to tie an ip recursivly to a found record inside the other ips(fo/map) mappings.
# You put your FQDN, you tie to a target with is resolvable, and you ll be given the ip
# of the related target.
# Easy and powerfull.
# ips_map:
#   staging-aaa.mydomain.tld: [provider1-dc1-3.mydomain.tld]
#   superproject2.mydomain.tld: [dev-superapp8.mydomain.tld]

# DNS Zones to really manage
# Each record in the database will be looked up if it is a member
# of the managed zones and possibly be added as a RR
# of the related zone.
# managed_dns_zones:
#   - my-domain.com
#   - my-domain.eu

# Normally, dnsserials are automatic computed in mc_pillar
# The serial changes each day and follow a YYYYMMDDXX scheme
# At each state turn, it is incremnented by one.
# If this serial is greater than the "YYYYMMDDXX" default, it is taken as the value
# The current serial will be stored on a local database.
#
# But if things are going wrong, you can specify here the serial to use.
# Think that it needs to be greather than the current serial registered in the local
# registry though
#
# dns_serials:
#   mydomain.com: 2014052643

# Specific ttls to add to machine RRs.
# rrs_ttls:
#   a.tiles.mydomain.tld: 3600

# MX DNS record to delare in a zone
# Those MX will also be given an A record if they are member
# of the domain (their ip is looked up in the ips structures)
# mx_map:
#   my-domain.com:
#     mx.my-domain.com: {}
#     mail2.my-domain.com: {priority: 50}
#   my-domain.org:
#     mail2.mydomain.com: {priority: 20}
#     mx.my-domain.com: {priority: 10}


# SRV RECORDS
# rrs_srv:
#   _autodiscover._tcp.foo.net: "0 5 443 mail.foo.net"
#   _autodiscover._tcp.foo.net:
#     - "0 5 443 mail.foo.net"
#     - "0 6 443 mail2.foo.net"

# TXT DNS record to add in a zone
# rrs_txt:
#   - dkim._domainkey.foo.com: "v=DKIM1; p=AAA/BBB+CCCfDDD FFF"
#   - dkim2._domainkey.foo.com:
#      - "v=DKIM1; p=AAA/BBB+CCCfDDD FFF"
#      - "v=DKIM2; p=AAA/BBB+CCCfDDD FFF"

# Raw DNS record to add as is in a zone
# rrs_raw:
#   mydomain.fr:
#     - |
#       listes.mydomain.fr. IN MX 10 foo.bar.com.
#     - '@ SPF "v=spf1 +mx -all"'

# The second level zones will take the first level zones as template
# and replace the first level domain by theirs (mydomain.com -> mydomain.com)
# managed_alias_zones:
#   my-domain.com:
#     - mydomain.com

# Per domain master dns server.
# and exposed public DNSes (slaves)
# In makina-states, we do not expose the real master to the outside world.
# All the entries wiull be given an A record which points to the target in the ips mappings.
# Please also note that slaves will be addressable through the "id.<domain.tld>" and not
# their real hostname.
#
# Please note that the master/slave communication is for the moment only secured
# via TSIG signature. DNSSEC is not yet enabled by default.
# dns_servers:
#   default:
#     master: provider1-dc1-1.mydomain.tld
#     slaves:
#       - provider25-2.mydomain.tld
#       - provider1-dc1-4.mydomain.tld
#       - provider1-dc1-3.mydomain.tld
#   # map a ns name with a minion id (if the dns name of the nameserver is binded for example
#   # on a failover ip
#   map:
#     ns.foo.net: provider25-2.mydomain.tld

# Configurations for burp makina-states's integration
# First level is the backup server itself fqdn
# Second level is the configuration tied to the backuped tenant
# Having a tenant under a backup server obvisously mean that
# this tenant is backuped by this backup server.
# backup_servers:
#   ovh.makina-corpus.net: {default_type: burp, types: [burp]}

# backup_server_map:
#   default: ovh.makina-corpus.net

# backup_configuration_map:
#   default: baremetal
#   default-vm: vm
#   foo.makina-corpus.net: foo.makina-corpus.net

# per server mc_burp settings
# backup_server_configurations:
#   foo.bar.net:
#     server_conf.max_children: 2
#     server_conf.max_status_children: 2

# salt not managed hosts that we backup
# backup_manual_hosts:
#   - foo.makina-corpus.net

# if we do not provide an explicit conf it defaults either to baremetal or vm
backup_configurations:
  baremetal:
    include:
      - /
      - /boot
      - /backup
      - /data
      - /etc
      - /home
      - /srv
      - /opt
      - /srv/backups
      - /static
      - /var/
      - /var/www
      - /var/makina
    cross_filesystem:
      - /boot
      - /backup
      - /data
      - /etc
      - /opt
      - /home
      - /srv
      - /srv/backups
      - /static
      - /var
      - /var/www
      - /var/makina
    exclude_regex:
      - ".*usr.*src.*linux-headers.*"
      - ".*var.*lib.*libvirt.*images.*"
      - ".*data.*burp.*"
      - ".*nobackup.*"
      - ".*lost.found.*"
      - ".*makina-states.*-lxc.*.tar.*xz.*"
      - ".*srv/mountpoints.*"
      - ".*srv/remounts.*"
      - ".*srv.*mastersalt.*makina-states.*"
      - ".*srv.*projects.*archives.*"
      - ".*srv.*salt.*makina-states.*"
      - ".*var.*cache.*apt.*"
      - ".*var.*cache.*salt.*master.*"
      - ".*var.*cache.*salt.*minion.*"
      - ".*var.*lib.*apt.*lists.*"
      - ".*var.*lib.*lxc.*del.*"
      - ".*var.*lib.*lxc.*makina-states.*/tmp/.*"
      - ".*spool.*cyrus.*backup_log.*"
      - ".*var.*lib.*lxc.*rootfs.*"
      - ".*var.*lock.*"
      - ".*var.*log.*atop.*"
      - ".*var.*run.*"
      - ".*var.*/tmp/.*"
    exclude:
      - "/dev"
      - "/proc"
      - "/sys"
      - "/tmp/"
  vm:
    cross_filesystem:
      - /boot
      - /backup
      - /data
      - /etc
      - /opt
      - /home
      - /srv
      - /srv/backup
      - /static
      - /var
      - /var/www
      - /var/makina
    include:
      - /boot
      - /backup
      - /data
      - /etc
      - /opt
      - /home
      - /srv
      - /srv/backup
      - /static
      - /var
      - /var/www
      - /var/makina
    exclude_regex:
      - ".*usr.*src.*linux-headers.*"
      - ".*data.*burp.*"
      - ".*nobackup.*"
      - ".*lost.found.*"
      - ".*makina-states.*-lxc.*.tar.*xz"
      - ".*srv.*mastersalt.*makina-states.*"
      - ".*srv/mountpoints.*"
      - ".*srv/remounts.*"
      - ".*srv.*projects.*archives.*"
      - ".*srv.*salt.*makina-states.*"
      - ".*var.*cache.*apt.*"
      - ".*var.*cache.*salt.*master.*"
      - ".*var.*cache.*salt.*minion.*"
      - ".*var.*lib.*apt.*lists.*"
      - ".*var.*lib.*lxc.*del.*"
      - ".*var.*lib.*lxc.*makina-states.*/tmp/.*"
      - ".*var.*lib.*lxc.*rootfs.*"
      - ".*var.*lock.*"
      - ".*var.*log.*atop.*"
      - ".*var.*run.*"
      - ".*spool.*cyrus.*backup_log.*"
      - ".*var.*/tmp/.*"
    exclude:
      - "/dev"
      - "/proc"
      - "/sys"
      - "/tmp/"
#   provider24-1.mydomain.tld:
#     include:
#       - /var/log
#       - /var/lib/lxc/
#       - /etc
#       - /home
#     cross_filesystem:
#       - /srv
#       - /var
#       - /home
#     exclude_regex:
#       - ".*nobackup.*"
#       - "var.*cache.*salt.*master.*"
#       - "var.*cache.*salt.*minion.*"
#       - "makina-states-precise-lxc-.*.tar.xz"
#       - /var/lib/lxc/.*/rootfs
#       - /var/lib/lxc/.*/del.*
#     exclude:
#       - /var/log/atop
#       - "/dev"
#       - "/proc"
#       - "/sys"
#       - "/tmp/"
#       - "/var/run/avahi-daemon/socket"
#       - "/var/run/dbus/system_bus_socket"
#       - "/var/run/fail2ban/fail2ban.sock"
#       - "/var/run/mysqld/mysqld.sock"
#       - "/var/run/nscd/socket"
#       - "/var/run/saslauthd/mux"
#       - "/var/run/slapd/ldapi"
#       - /var/cache/apt/archives
#   foo.makina-corpus.net:
#      ssh_gateway: provider24-1.mydomain.tld
#      add_exclude_regex:
#        - "var.*cache.*salt.*master.*"
#      include:
#        - /backup

# configure a isc-dhcpd server on an host
# indexed by dhcp servers minion id
# dhcpd_conf:
#   foo.makina-foo.net:
#     conf:
#       domain_name: makina-foo.net
#       domain_name_servers: "10.2.253.1, 8.8.8.8"
#     subnets:
#       10.5.0.0:
#         netmask: 255.255.0.0
#         conf:
#           "range": 10.2.10.1 10.2.20.253
#           "option domain-name-servers": "10.2.1.1"
#           "option domain-name": '"makina-foo.net"'
#           "option routers": "10.2.1.1"
#           "option broadcast-address": "10.2.255.255"
#           "default-lease-time": "600"
#           "max-lease-time": "7200"
#     hosts:
#       tata:
#         "option subnet-mask": "255.255.0.0"
#         "hardware ethernet": "18:11:11:f2:22:13"
#         "fixed-address": "tata.makina-nantes.net"

# list of hosts not to supervise
# non_supervised_hosts:
#   - a.a.net

# configure an icinga cluster
# supervision_configurations:
#   supervision:
#     ui: icinga.foo.net
#     pnp: icinga.foo.net
#     master: icinga.foo.net
#     nagvis: icinga.foo.net
#     nagvis_conf:
#       nginx:
#         domain: nagvis.foo.net
#         nagvis:
#           htpasswd_file: ldap://ldap.foo.net/dc=mcjam,dc=org?uid?sub?(objectClass=person)
#       nagvis_ini_php:
#         backends:
#           live_1:
#             socket: "tcp:10.5.0.99:6558"
#     pnp_conf:
#       npcd_cfg:
#         log_level: 0
#       nginx:
#         domain: pnp.foo.net
#         pnp4nagios:
#           htpasswd_file: ldap://ldap.foo.net/dc=mcjam,dc=org?uid?sub?(objectClass=person)
#     ui_conf:
#       ldap_auth:
#         url: ldap://ldap.foo.net
#         binddn: "cn=ldapreader,ou=Virtual,ou=People,dc=mcjam,dc=org"
#         bindpw: "aaa"
#         base_dn: "dc=mcjam,dc=org"
#         tls: true
#       create_pgsql: false
#       nginx:
#         domain: icinga-web.foo.net
#         icinga_web:
#           htpasswd_file: ldap://ldap.foo.net/dc=mcjam,dc=org?uid?sub?(objectClass=person)
#       modules:
#         pnp4nagios:
#           pnpfornagios_url: "https://pnp.foo.net"
#         nagvis:
#           cronks_xml:
#             cronks:
#               iFrameViewNagvis:
#                 parameter:
#                   url: "http://nagvis.foo.net"
#       databases:
#         web:
#           host: '10.5.0.48'
#           port: '5432'
#           user: 'icinga_web'
#           password: 'aaa'
#           name: 'icinga_web'
#         ido2db:
#           host: '10.5.0.48'
#           port: '5432'
#           user: 'icinga'
#           password: 'aaa'
#           name: 'icinga'
#           prefix: 'icinga_'
#     master_conf:
#       create_pgsql: false
#       ssh:
#         id_rsa_supervision: |
#                             -----BEGIN RSA PRIVATE KEY-----
#                             aaaa
#                             -----END RSA PRIVATE KEY-----
#         id_rsa_supervision.pub: |
#                                 ssh-rsa aaa root@a
#       modules:
#         livestatus:
#           bind_host: "0.0.0.0"
#         ido2db:
#           database:
#             host: '10.5.0.48'
#             port: '5432'
#             user: 'icinga'
#             password: 'aaa'
#             name: 'icinga'
#         cgi:
#           enabled: false
#       constants_conf:
#         SNMP_CRYPT: '"bbb"'
#         SNMP_PASS: '"bbb"'
#         SNMP_USER: '"anauzersnmp"'
#         TEST_AUTHPAIR: '"user:pass"'
#         TESTUSER: '"bbb"'
#         MAIL: '"@foo.net"'
#         MX: '"mail.foo.net"'
#         TESTPWD: '"aaa"'
#     default_template_host: {}
#     default_template_vm: {}
#   definitions:
#     autoconfigured_hosts:
#       dev-foo.foo.net:
#         notification: [G_Foo]
#         disk_space: ['/', '/srv']
#         remote_apache_status: true
#         supervisor: [/srv/projects/foo/project/bin/supervisorctl]
#         raid: true
#         services_attrs:
#           remote_apache_status:
#             vars.http_servername: localhost
#           web:
#             transcode:
#               vars.port: 8888
#               vars.strings: [OK]
#               vars.http_remote: 1
#             Etherpad:
#               vars.port: 9001
#               vars.http_remote: 1
#             beecollab.foo.net:
#               vars.strings: [foo]
#             demo.beecollab.foo.net:
#               vars.strings: [fooo]
#               vars.http_ssl: 1
#     objects:
#       NCT_BASE:
#         attrs:
#           env:
#             ICINGAWEB: "https://icinga-web.foo.net/icinga-web/index.php"
#       S_FooTest:
#         attrs:
#           members: dev-foo.foo.net
#           import: ["ST_ALERT"]
#           check_command: "CSSH"
#           vars.command: "/var/makina/test.sh"
#       G_Foo:
#         attrs:
#           members: [U_Foo]
#       U_Foo:
#         attrs:
#           email: a@foo.net
#       GS_foo:
#         attrs:
#           display_name: foo
#           members: [dev-foo.foo.net]

# mirrors configuration
# pkgmgr_conf:
#   foo.makina-corpus.net:
#     apt.ubuntu.mirror: http://ubuntu-archive.mirrors.proxad.net/ubuntu/
#   default:
#     apt.ubuntu.mirror: http://mirror.ovh.net/ftp.ubuntu.com/

# Configuration overrides for makina-states's shorewall integration
# We install shorewall everywhere by default.
# WARNING SHOREWALL IS OBSOLETE, FOR NOW MAKINASTATES HAS SWITCHED TO FIREWALLD
# shorewall_overrides:
#   provider1-dc1-2.mydomain.tld:
#     no_ftp: False
#     no_postgresql: False
#     params.RESTRICTED_FTP: "all"
#     params.RESTRICTED_POSTGRESQL: "net:all"
#   provider1-dc1-1.mydomain.tld:
#     params.superapp8: 128.5.128.1
#     rules:
#       - {comment: 'ssh temporary access'}
#       - {action: DNAT, source: net, dest: 'lxc:${SALT_superapp8}:22', proto: tcp, dport: 2232}
#   provider3-99.mydomain.tld:
#     rules:
#       - {comment: 'app'}
#       - {action: ACCEPT, source: net, dest: '$FW', proto: tcp, dport: 1020}
#       - {comment: 'ftp range'}
#       - {action: ACCEPT, source: net, dest: '$FW', proto: tcp, dport: '20547:32645'}
#       - {comment: 'trac'}
#       - {action: ACCEPT, source: net, dest: '$FW', proto: tcp, dport: '888'}
#     params.RESTRICTED_SSH: all
#     no_dns: false
#     no_smtp: false
#     no_ftp: false

# SSH configuration overrides to access hosts
#ssh_hosts: {}
#  vm.makina-corpus.net:
#    ssh_gateway: xxxx.makina-corpus.net
#    ssh_host: vm.makina-corpus.net
#    # (opt) ssh_host: 10.5.0.2
#    # (opt) ssh_gateway_port: 22
#    # (opt) ssh_gateway_key: '/root/.ssh/id_rsa'
#    # (opt) ssh_username: root
# vim: set ft=yaml sts=2 ts=2 ai et:
